# � Session-Based Token Upgrade Plan
## 📅 สร้างเมื่อ: 16 สิงหาคม 2025

---

## �📋 สรุปการตรวจสอบระบบ Session-Based Token

### ✅ สิ่งที่เรามีแล้ว:

**1. Database Schema (พร้อมใช้งาน)**
- UserSession model พร้อม fields ครบถ้วน:
  - `accessToken`, `refreshToken`, `expiresAt`
  - `ipAddress`, `userAgent` (security tracking)
  - Relation กับ User model

**2. Authentication Utilities**
- `utils/auth.ts`: `generateSessionToken()`, `validateSessionToken()`
- `controllers/authController.ts`: มี session login logic พื้นฐาน
- `session-based-token-manager.js`: Tools สำหรับจัดการ session

**3. Current Infrastructure**
- Prisma ORM พร้อม UserSession model
- Express.js backend structure
- Admin routes และ middleware structure

---

### ❌ สิ่งที่ยังไม่มี:

**1. Core Session Middleware**
- `sessionAuthMiddleware` - ตัวตรวจสอบ session tokens
- `generateSessionTokenPair()` - สร้าง access + refresh token

**2. Session Endpoints**
- Refresh token endpoint
- Proper logout endpoint (revoke session)
- Session management endpoints

**3. Integration**
- Admin routes ยังใช้ JWT middleware
- Frontend admin panel ยังใช้ JWT tokens
- Session token storage และ rotation logic

---

## 🚀 แผนการอัพเกรด (8 ขั้นตอน):

### **Phase 1: Core Session Infrastructure**
1. สร้าง `sessionAuthMiddleware`
2. สร้าง `generateSessionTokenPair` function
3. สร้าง refresh token endpoint

### **Phase 2: Authentication Endpoints**
4. อัพเดต login endpoint ให้ return session tokens
5. สร้าง logout endpoint พร้อม session revocation

### **Phase 3: Backend Integration**
6. Refactor admin routes ให้ใช้ `sessionAuthMiddleware`

### **Phase 4: Frontend Integration**
7. อัพเดต admin panel ให้ใช้ session tokens
8. Test end-to-end session-based authentication

---

## 📊 สรุปการใช้งาน Session-Based Token ในระบบ

### 🎯 **Admin Panel Functions ที่ต้องใช้ Session Authentication:**

**1. Backend API Endpoints:**
- `/bookings/admin/all` - ดู booking ทั้งหมด
- `/bookings/admin/stats` - สถิติ booking
- `/bookings/admin/bookings/search` - ค้นหา booking
- `/bookings/admin/bookings/:id` - ดู booking รายตัว
- `/bookings/:id/check-in` - Check-in
- `/bookings/:id/check-out` - Check-out
- `/bookings/admin/rooms/:roomId/status` - อัพเดทสถานะห้อง

**2. Frontend Components:**
- `BookingTable.jsx` - แสดงรายการ booking
- `BookingList.jsx` - หน้าจัดการ booking
- `bookingService.js` - API calls ไป backend
- `authService.js` - จัดการ authentication

---

### 🔑 **Session Token Data Structure:**

```javascript
// UserSession Model (Prisma)
{
  id: "uuid",           // session_id
  userId: "uuid",       // user_id
  accessToken: "string", // JWT access token
  refreshToken: "string", // JWT refresh token
  expiresAt: "DateTime", // token expiry
  createdAt: "DateTime", // session creation
  ipAddress: "string",   // security tracking
  userAgent: "string",   // security tracking
}
```

---

### 📋 **Use Cases สำหรับ Session-Based Token:**

**1. Login Flow:**
- User login → สร้าง session → เก็บ accessToken + refreshToken
- Track IP address และ User-Agent สำหรับ security

**2. API Request Flow:**
- Frontend ส่ง accessToken → Middleware ตรวจสอบ session ใน database
- ถ้า token valid → อนุญาตเข้าถึง API
- ถ้า token expired → ใช้ refreshToken

**3. Token Refresh Flow:**
- accessToken หมดอายุ → ใช้ refreshToken ขอ token ใหม่
- สร้าง accessToken ใหม่ → อัพเดท session ใน database

**4. Security Tracking:**
- เก็บ IP address และ User-Agent
- ตรวจสอบ suspicious login
- Revoke session ได้ทันที

**5. Logout Flow:**
- User logout → ลบ session จาก database
- Invalidate ทั้ง accessToken และ refreshToken

---

### 🔧 **Components ที่ต้องสร้าง/แก้ไข:**

**Backend:**
1. `sessionAuthMiddleware` - แทน `verifyAdminToken`
2. `generateSessionTokenPair()` - สร้าง access + refresh token
3. Session management endpoints (refresh, logout)
4. อัพเดท admin routes ให้ใช้ session middleware

**Frontend:**
5. อัพเดท `authService.js` ให้ support session tokens
6. อัพเดท `apiService.js` ให้ handle token refresh
7. อัพเดท `BookingTable.jsx` ให้ใช้ session auth

---

### 🎮 **Token Lifecycle Flow:**

```
1. Login → Create Session → Store in DB
2. API Call → Validate Session → Check DB
3. Token Refresh → Update Session → New Access Token
4. Logout → Delete Session → Remove from DB
5. Security Check → IP/User-Agent → Block suspicious
```

---

### 🏆 **ประโยชน์ที่จะได้รับ:**

- 🔒 **ปลอดภัยกว่า** - session tracking, IP/User-Agent validation
- 🎯 **ควบคุมได้ดีกว่า** - revoke session ได้ทันที
- 🔄 **Refresh token** - ไม่ต้อง login ใหม่บ่อย
- 📊 **Audit trail** - ติดตาม session usage ได้

---

## 📝 **Implementation Notes:**

**Current Pain Points:**
- JWT tokens เกิด 403 Forbidden errors
- ไม่สามารถ revoke token ได้ทันที
- ไม่มี audit trail สำหรับ admin actions
- Security tracking ไม่เพียงพอ

**Solution Benefits:**
- Session-based tokens เก็บใน database
- Immediate revocation capability
- Complete audit trail
- Enhanced security with IP/User-Agent tracking
- Better user experience with refresh tokens

---

**Status:** 📋 Planning Phase - พร้อมเริ่ม Implementation