// üè® Hotel Booking System - Real Customer Booking Test
// ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≤‡∏ô API ‡πÅ‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á ‡πÜ

const http = require('http');
const https = require('https');
const { URL } = require('url');

class RealBookingTester {
    constructor() {
        this.apiBase = 'http://localhost:3001/api/v1';
        this.adminToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhZG1pbi0wMDEiLCJlbWFpbCI6ImFkbWluQGhvdGVsLWJvb2tpbmcuY29tIiwicm9sZSI6ImFkbWluIiwicGVybWlzc2lvbnMiOlsidmlld19ib29raW5ncyIsIm1hbmFnZV9yb29tcyIsIm1hbmFnZV91c2VycyJdLCJpc0FkbWluIjp0cnVlLCJpYXQiOjE3NTUyODQ5MzQsIm5hbWUiOiJTeXN0ZW0gQWRtaW5pc3RyYXRvciIsImV4cCI6MTc1NTM3MTMzNCwiYXVkIjoiYWRtaW4tcGFuZWwiLCJpc3MiOiJob3RlbC1ib29raW5nLXN5c3RlbSJ9.WKpZrakfaERuZu5gaH-vLEILhGj07H7ZZjMJS3Uy_TY';
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥ HTTP Request
    async makeRequest(url, method = 'GET', data = null, headers = {}) {
        return new Promise((resolve, reject) => {
            const urlObj = new URL(url);
            const isHttps = urlObj.protocol === 'https:';
            const httpModule = isHttps ? https : http;
            
            const options = {
                hostname: urlObj.hostname,
                port: urlObj.port || (isHttps ? 443 : 80),
                path: urlObj.pathname + urlObj.search,
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                    ...headers
                }
            };

            if (data && method !== 'GET') {
                const postData = JSON.stringify(data);
                options.headers['Content-Length'] = Buffer.byteLength(postData);
            }

            const req = httpModule.request(options, (res) => {
                let responseData = '';
                
                res.on('data', (chunk) => {
                    responseData += chunk;
                });
                
                res.on('end', () => {
                    try {
                        const parsedData = responseData ? JSON.parse(responseData) : {};
                        resolve({
                            status: res.statusCode,
                            data: parsedData,
                            ok: res.statusCode >= 200 && res.statusCode < 300
                        });
                    } catch (error) {
                        resolve({
                            status: res.statusCode,
                            data: responseData,
                            ok: res.statusCode >= 200 && res.statusCode < 300
                        });
                    }
                });
            });

            req.on('error', (error) => {
                reject(error);
            });

            if (data && method !== 'GET') {
                req.write(JSON.stringify(data));
            }
            
            req.end();
        });
    }

    // ===================================
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° Schema
    // ===================================
    async createRealBooking(customerData = {}) {
        const bookingId = Date.now().toString().slice(-6);
        
        const defaultBooking = {
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            customerName: customerData.name || '‡∏Ñ‡∏∏‡∏ì ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
            customerEmail: customerData.email || 'mongkol09ms@gmail.com',
            customerPhone: customerData.phone || '0891234567',
            
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
            roomId: customerData.roomId || `R10${bookingId.slice(-1)}`,
            roomType: customerData.roomType || 'deluxe',
            
            // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å
            checkInDate: customerData.checkInDate || '2025-08-20',
            checkOutDate: customerData.checkOutDate || '2025-08-22',
            nights: customerData.nights || 2,
            
            // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å
            guests: customerData.guests || 2,
            adults: customerData.adults || 2,
            children: customerData.children || 0,
            
            // ‡∏£‡∏≤‡∏Ñ‡∏≤
            totalAmount: customerData.totalAmount || 5500,
            roomRate: customerData.roomRate || 2500,
            taxes: customerData.taxes || 250,
            serviceFees: customerData.serviceFees || 100,
            
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            specialRequests: customerData.specialRequests || '‡∏Ç‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡∏ß‡∏ó‡∏∞‡πÄ‡∏•',
            paymentStatus: 'confirmed',
            paymentMethod: 'credit_card',
            source: 'website',
            currency: 'THB',
            
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
            emergencyContact: {
                name: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡πÉ‡∏à‡∏î‡∏µ',
                phone: '0871234567',
                relationship: 'spouse'
            }
        };

        return defaultBooking;
    }

    // ===================================
    // STEP 1: ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
    // ===================================
    async bookRoom(customerData) {
        console.log(`üõéÔ∏è  STEP: ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á ${customerData.name || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤'}`);
        console.log('='.repeat(50));
        
        try {
            const bookingData = await this.createRealBooking(customerData);

            console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:');
            console.log(`üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${bookingData.customerName}`);
            console.log(`üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${bookingData.customerEmail}`);
            console.log(`üì± ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: ${bookingData.customerPhone}`);
            console.log(`üè† ‡∏´‡πâ‡∏≠‡∏á: ${bookingData.roomId} (${bookingData.roomType})`);
            console.log(`üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${bookingData.checkInDate} - ${bookingData.checkOutDate}`);
            console.log(`üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å: ${bookingData.guests} ‡∏Ñ‡∏ô`);
            console.log(`üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°: ‡∏ø${bookingData.totalAmount}`);
            console.log(`üìù ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©: ${bookingData.specialRequests}`);

            const response = await this.makeRequest(`${this.apiBase}/bookings`, 'POST', bookingData);

            console.log(`üì° Response Status: ${response.status}`);
            
            if (response.ok) {
                console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
                console.log(`üìÑ Booking ID: ${response.data.data?.id || 'Unknown'}`);
                console.log(`üé´ Reference: ${response.data.data?.bookingReferenceId || 'Unknown'}`);
                console.log(`üì± QR Code: ${response.data.data?.qrCode || 'Unknown'}`);
                return response.data;
            } else {
                console.log('‚ùå ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', response.data);
                return null;
            }
            
        } catch (error) {
            console.log('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
            return null;
        }
    }

    // ===================================
    // STEP 2: Admin ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    // ===================================
    async checkAdminBookings() {
        console.log('\nüë®‚Äçüíº Admin Panel - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á');
        console.log('='.repeat(50));
        
        try {
            const response = await this.makeRequest(`${this.apiBase}/bookings/admin/all`, 'GET', null, {
                'Authorization': `Bearer ${this.adminToken}`
            });

            console.log(`üì° Response Status: ${response.status}`);
            
            if (response.ok) {
                const bookings = response.data.data?.bookings || [];
                console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${bookings.length}`);
                
                if (bookings.length > 0) {
                    console.log('\nüìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:');
                    bookings.slice(0, 5).forEach((booking, index) => {
                        console.log(`${index + 1}. ${booking.customerName || booking.guestName || 'Unknown'}`);
                        console.log(`   üìß ${booking.customerEmail || booking.email || 'No email'}`);
                        console.log(`   üè† Room: ${booking.roomId} | Status: ${booking.status}`);
                        console.log(`   üìÖ ${booking.checkInDate} - ${booking.checkOutDate}`);
                        console.log(`   üí∞ ‡∏ø${booking.totalAmount || booking.amount || 0}`);
                        console.log(`   üÜî ${booking.bookingReferenceId || booking.id}`);
                        console.log('');
                    });
                } else {
                    console.log('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
                }
                
                return response.data;
            } else {
                console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ:', response.data);
                return null;
            }
            
        } catch (error) {
            console.log('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
            return null;
        }
    }

    // ===================================
    // ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£
    // ===================================
    async runCompleteBookingTest() {
        console.log('üè® HOTEL BOOKING SYSTEM - COMPLETE CUSTOMER BOOKING TEST');
        console.log('='.repeat(80));
        console.log('üéØ ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏á ‡πÜ + ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô Admin Panel');
        console.log('='.repeat(80));

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API
        try {
            const healthCheck = await this.makeRequest(`${this.apiBase}/bookings/admin/all`, 'GET', null, {
                'Authorization': `Bearer ${this.adminToken}`
            });
            
            if (healthCheck.ok) {
                console.log('‚úÖ API Server ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß\n');
            } else {
                console.log('‚ùå API Server ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°');
                return;
            }
        } catch (error) {
            console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API Server ‡πÑ‡∏î‡πâ');
            return;
        }

        try {
            // ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1
            const customer1 = {
                name: '‡∏Ñ‡∏∏‡∏ì ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
                email: 'somchai@email.com',
                phone: '0891234567',
                roomId: 'R201',
                roomType: 'deluxe',
                checkInDate: '2025-08-20',
                checkOutDate: '2025-08-22',
                guests: 2,
                totalAmount: 5500,
                specialRequests: '‡∏Ç‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡∏ß‡∏ó‡∏∞‡πÄ‡∏• + ‡πÄ‡∏ï‡∏µ‡∏¢‡∏á‡∏Ñ‡∏¥‡∏á‡πÑ‡∏ã‡∏™‡πå'
            };

            // ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 2
            const customer2 = {
                name: '‡∏Ñ‡∏∏‡∏ì ‡∏°‡∏≤‡∏ô‡∏µ ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°',
                email: 'manee@email.com',
                phone: '0823456789',
                roomId: 'R301',
                roomType: 'suite',
                checkInDate: '2025-08-25',
                checkOutDate: '2025-08-27',
                guests: 1,
                totalAmount: 7800,
                specialRequests: '‡∏Ç‡∏≠‡∏ú‡πâ‡∏≤‡∏õ‡∏π‡∏ó‡∏µ‡πà‡∏ô‡∏≠‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß + breakfast ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á'
            };

            // ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 3
            const customer3 = {
                name: '‡∏Ñ‡∏∏‡∏ì ‡∏ò‡∏ô‡∏≤ ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏Å‡πà‡∏á',
                email: 'thana@email.com',
                phone: '0834567890',
                roomId: 'R401',
                roomType: 'standard',
                checkInDate: '2025-08-28',
                checkOutDate: '2025-08-30',
                guests: 3,
                totalAmount: 4200,
                specialRequests: '‡∏Ç‡∏≠‡πÄ‡∏ï‡∏µ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏° + ‡πÅ‡∏Å‡πâ‡∏ß‡∏ô‡πâ‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°'
            };

            // ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
            const booking1 = await this.bookRoom(customer1);
            console.log('\n' + '‚îÄ'.repeat(60) + '\n');
            
            const booking2 = await this.bookRoom(customer2);
            console.log('\n' + '‚îÄ'.repeat(60) + '\n');
            
            const booking3 = await this.bookRoom(customer3);
            console.log('\n' + '‚îÄ'.repeat(60) + '\n');

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô Admin Panel
            await this.checkAdminBookings();

            // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
            console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
            console.log('='.repeat(50));
            console.log(`üõéÔ∏è  ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 1 (${customer1.name}): ${booking1 ? '‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}`);
            console.log(`üõéÔ∏è  ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 2 (${customer2.name}): ${booking2 ? '‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}`);
            console.log(`üõéÔ∏è  ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà 3 (${customer3.name}): ${booking3 ? '‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}`);
            
            console.log('\nüéØ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
            console.log('üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Admin Panel ‡∏ó‡∏µ‡πà: http://localhost:3000/admin/room-booking-list');
            console.log('üí° ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Refresh ‡πÉ‡∏ô Admin Panel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î');
            
        } catch (error) {
            console.log('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error.message);
        }
    }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const tester = new RealBookingTester();
tester.runCompleteBookingTest();
