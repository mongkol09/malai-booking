const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkBookingList() {
  try {
    console.log('üîç ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Booking List ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...\n');

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• booking ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const bookings = await prisma.booking.findMany({
      include: {
        guest: {
          select: {
            firstName: true,
            lastName: true,
            email: true,
            phoneNumber: true
          }
        },
        room: {
          select: {
            roomNumber: true,
            roomType: {
              select: {
                name: true,
                pricePerNight: true
              }
            }
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    console.log(`üìä ‡∏û‡∏ö Booking ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${bookings.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);

    if (bookings.length === 0) {
      console.log('‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Booking ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
      return;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• booking ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    bookings.forEach((booking, index) => {
      console.log(`üè® Booking #${index + 1}`);
      console.log(`   üìã Booking ID: ${booking.id}`);
      console.log(`   üîñ Reference: ${booking.bookingReferenceId}`);
      console.log(`   üë§ Guest: ${booking.guest?.firstName} ${booking.guest?.lastName}`);
      console.log(`   üìß Email: ${booking.guest?.email}`);
      console.log(`   üì± Phone: ${booking.guest?.phoneNumber || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
      console.log(`   üè† Room: ${booking.room?.roomNumber || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£'}`);
      console.log(`   üõèÔ∏è  Room Type: ${booking.room?.roomType?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
      console.log(`   üí∞ Price/Night: ‡∏ø${booking.room?.roomType?.pricePerNight?.toLocaleString() || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
      console.log(`   üìÖ Check-in: ${new Date(booking.checkinDate).toLocaleDateString('th-TH')}`);
      console.log(`   üìÖ Check-out: ${new Date(booking.checkoutDate).toLocaleDateString('th-TH')}`);
      console.log(`   üë• Guests: ${booking.numAdults} ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà${booking.numChildren > 0 ? `, ${booking.numChildren} ‡πÄ‡∏î‡πá‡∏Å` : ''}`);
      console.log(`   üìä Status: ${booking.status}`);
      console.log(`   üí≥ Payment Status: ${booking.paymentStatus}`);
      console.log(`   üíµ Total Amount: ‡∏ø${booking.totalAmount?.toLocaleString() || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
      console.log(`   üìù Special Requests: ${booking.specialRequests || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
      console.log(`   üïê Created: ${new Date(booking.createdAt).toLocaleString('th-TH')}`);
      console.log('   ' + '‚îÄ'.repeat(50));
    });

    // ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    console.log('\nüìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Booking:');
    
    const statusStats = bookings.reduce((acc, booking) => {
      acc[booking.status] = (acc[booking.status] || 0) + 1;
      return acc;
    }, {});

    const paymentStats = bookings.reduce((acc, booking) => {
      acc[booking.paymentStatus] = (acc[booking.paymentStatus] || 0) + 1;
      return acc;
    }, {});

    console.log('\nüî∏ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Booking:');
    Object.entries(statusStats).forEach(([status, count]) => {
      console.log(`   ${status}: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    });

    console.log('\nüí≥ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:');
    Object.entries(paymentStats).forEach(([status, count]) => {
      console.log(`   ${status}: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    });

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°
    const totalRevenue = bookings
      .filter(booking => booking.paymentStatus === 'PAID')
      .reduce((sum, booking) => sum + (booking.totalAmount || 0), 0);

    console.log(`\nüí∞ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏° (‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß): ‡∏ø${totalRevenue.toLocaleString()}`);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Booking:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkBookingList();