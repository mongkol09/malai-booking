ภาพรวม: จากการค้นหาสู่การยืนยัน
Flow การจองของลูกค้าจะต้องเรียบง่ายและราบรื่นที่สุด แม้ว่าเบื้องหลังจะมีการคำนวณที่ซับซ้อนก็ตาม เราจะแบ่งกระบวนการออกเป็น 6 ขั้นตอนหลัก
ขั้นตอนที่ 1: การค้นหา (The Search)
มุมมองลูกค้า: ลูกค้าเข้าสู่เว็บไซต์ของคุณ และเจอหน้าค้นหาที่เรียบง่าย
เลือกวันที่เช็คอิน (Check-in Date)
เลือกวันที่เช็คเอาท์ (Check-out Date)
เลือกจำนวนผู้เข้าพัก (Number of Guests)
กดปุ่ม "ค้นหาห้องพัก"
เบื้องหลัง (Frontend): เมื่อลูกค้ากดค้นหา Frontend จะรวบรวมข้อมูลทั้งหมดนี้ และเตรียมยิง API ไปยัง Backend
ขั้นตอนที่ 2: การคำนวณราคาและห้องว่าง (The Calculation - หัวใจของระบบ)
นี่คือขั้นตอนที่ Backend จะนำ PricingRules ทั้งหมดมาใช้งานจริง
มุมมองลูกค้า: เห็นหน้าจอโหลดข้อมูลชั่วครู่ (Loading Spinner)
เบื้องหลัง (Backend):
Frontend ยิง API GET /api/v1/public/availability?checkin=...&checkout=...
Backend รับ Request และเริ่มทำงานทันที
ตรวจสอบความพร้อมเบื้องต้น:
ดึงข้อมูลห้องพักทุกประเภทที่คุณมี (Private House, Onsen, Standard)
เริ่มวนลูปใหญ่ (สำหรับแต่ละประเภทห้อง):
สำหรับ "Private House":
Backend จะวนลูปสำหรับ แต่ละคืน ที่ลูกค้าต้องการพัก (เช่น คืนวันที่ 10, 11, 12)
สำหรับแต่ละคืน มันจะไป SELECT ข้อมูลจากตาราง DailyRoomRates เพื่อดึง current_rate และ restrictions ของคืนนั้นๆ ออกมา
ตรวจสอบข้อจำกัด: เช็คว่าการจองนี้ละเมิดกฎ mlos (พักขั้นต่ำ) หรือไม่
รวมราคา: ถ้ารอดทุกข้อจำกัด ก็จะนำ current_rate ของทุกคืนมารวมกันเป็น totalPrice
สำหรับ "Onsen Rooms":
ทำกระบวนการเดียวกัน แต่เพิ่มเติมคือต้องเช็คว่ามีห้อง Onsen ว่างเหลืออยู่หรือไม่ (Inventory Check)
สำหรับ "Standard Rooms":
ทำกระบวนการเดียวกัน
สร้างผลลัพธ์: Backend จะรวบรวมข้อมูลของห้องพักแต่ละประเภทที่ "ว่าง" และ "ไม่ผิดกฎ" พร้อมแนบข้อมูลสำคัญกลับไป:
totalPrice: ราคารวมสุทธิ
priceBreakdown: Array ที่แสดงราคาของแต่ละคืน เพื่อความโปร่งใส (เช่น [{date: "10 Aug", price: 5000}, {date: "11 Aug", price: 7000}])
ขั้นตอนที่ 3: การแสดงผล (The Display)
มุมมองลูกค้า: หน้าจอโหลดเสร็จสิ้น และแสดงรายการห้องพักที่ว่างพร้อมราคา
Private House: 25,000 บาท (สำหรับ 3 คืน)
Onsen Room: 18,000 บาท (สำหรับ 3 คืน)
Standard Room: 12,000 บาท (สำหรับ 3 คืน)
ลูกค้าสามารถคลิกดู priceBreakdown เพื่อดูว่าทำไมราคาแต่ละคืนไม่เท่ากัน
เบื้องหลัง (Frontend): นำข้อมูล JSON ที่ได้รับจาก API มาแสดงผลให้สวยงาม
ขั้นตอนที่ 4: การเลือกห้องและการ "ล็อคราคา" (The Selection & Price Lock)
มุมมองลูกค้า: ลูกค้าตัดสินใจเลือก "Onsen Room" และกดปุ่ม "จองเลย"
เบื้องหลัง (Backend & Frontend):
เมื่อลูกค้ากดจอง ระบบจะไม่ได้พาไปหน้าจ่ายเงินทันที แต่จะทำการ "ล็อคราคาและห้อง" ชั่วคราว เพื่อป้องกันปัญหา 2 อย่าง:
ราคาเปลี่ยน: ป้องกันกรณีที่ Admin ปรับราคาขึ้นพอดี ในขณะที่ลูกค้ากำลังกรอกข้อมูล
ห้องถูกตัดหน้า: ป้องกันกรณีที่มีลูกค้าอีกคนจองห้องสุดท้ายตัดหน้าไปในเสี้ยววินาที
Backend จะสร้าง BookingIntent (เจตนาการจอง) ที่มีอายุสั้นๆ (เช่น 10-15 นาที) ซึ่งจะเก็บ roomId, priceSnapshot (ราคาที่ตกลงกัน ณ ตอนนั้น), และ expires_at (เวลาหมดอายุ)
Frontend ได้รับการยืนยันว่าล็อคสำเร็จ และพาลูกค้าไปยังหน้าถัดไปพร้อมกับตัวนับเวลาถอยหลัง
ขั้นตอนที่ 5: การกรอกข้อมูลและชำระเงิน (The Details & Payment)
มุมมองลูกค้า: อยู่ในหน้ากรอกข้อมูลส่วนตัว (ชื่อ, อีเมล, เบอร์โทร) และข้อมูลบัตรเครดิต โดยมีตัวนับเวลาถอยหลังแสดงอยู่เพื่อกระตุ้นให้ทำรายการให้เสร็จ
เบื้องหลัง (Frontend & Payment Gateway): Frontend ส่งข้อมูลบัตรเครดิตไปยัง Payment Gateway (เช่น Omise, Stripe) โดยตรงเพื่อความปลอดภัย และได้รับ Token การชำระเงินกลับมา
ขั้นตอนที่ 6: การยืนยันการจอง (The Confirmation)
มุมมองลูกค้า: กรอกข้อมูลและกดปุ่ม "ยืนยันการจองและชำระเงิน"
เบื้องหลัง (Backend):
Frontend ส่งข้อมูลทั้งหมด (ข้อมูลส่วนตัว + Token การชำระเงิน) พร้อมกับ BookingIntent ID มายัง API POST /api/v1/bookings/confirm
Backend ตรวจสอบว่า BookingIntent ยังไม่หมดอายุ
ทำ Transaction ใน Database:
INSERT ข้อมูลลงในตาราง Bookings
UPDATE สถานะของห้องใน DailyRoomRates หรือตาราง Inventory
INSERT ข้อมูลการชำระเงินลงในตาราง Payments
ส่งอีเมล: ส่งอีเมลยืนยันการจอง (Confirmation Email) ให้กับลูกค้าโดยอัตโนมัติ
Backend ส่ง Response ยืนยันความสำเร็จกลับไปให้ Frontend
Frontend แสดงหน้า "ขอบคุณสำหรับการจอง" พร้อมรายละเอียดการจองทั้งหมด
นี่คือ Flow ที่สมบูรณ์ซึ่งจะมอบประสบการณ์ที่ดีและปลอดภัยให้กับลูกค้า ในขณะที่เบื้องหลังก็ทำงานร่วมกับระบบ Dynamic Pricing ของเราได้อย่างไร้รอยต่อครับ




