ภาพรวม: จากการจองสู่การเข้าพักและการเดินทางกลับ
เอกสารนี้จะอธิบาย Flow การทำงานสำหรับพนักงานต้อนรับ (Front Desk Staff) เมื่อลูกค้าเดินทางมาถึงที่พักเพื่อทำการเช็คอิน และเมื่อลูกค้าต้องการเดินทางกลับเพื่อทำการเช็คเอาท์ เป้าหมายคือการสร้างกระบวนการที่รวดเร็ว, แม่นยำ, และลดความผิดพลาด โดยใช้ Admin Dashboard เป็นเครื่องมือหลัก
ผู้เกี่ยวข้อง (Actors):
พนักงานต้อนรับ (Front Desk Staff)
ลูกค้า (Guest)
เครื่องมือหลัก (Tools):
Admin Dashboard
เครื่องสแกน QR Code (อาจจะเป็น Webcam หรือเครื่องอ่านโดยเฉพาะ)
Flow การ Check-in โดยละเอียด
ขั้นตอนที่ 1: การค้นหาการจอง (Finding the Booking)
สถานการณ์: ลูกค้า (คุณสมศรี) เดินมาถึงเคาน์เตอร์และแจ้งว่ามีจองห้องพักไว้
หน้าจอ Dashboard (UI):
ที่หน้าหลักของ Dashboard ควรมีช่องค้นหา (Search Bar) ที่โดดเด่น
ข้างๆ ช่องค้นหา ควรมีปุ่มไอคอน "สแกน QR Code"
กระบวนการทำงานของพนักงาน:
พนักงานทักทายและสอบถามข้อมูลสำหรับค้นหาการจอง
วิธี A (ค้นหาด้วยข้อความ): พนักงานพิมพ์ชื่อ, นามสกุล, หรือหมายเลขอ้างอิงการจอง (#B-12345) ลงในช่องค้นหา
วิธี B (ค้นหาด้วย QR Code - วิธีที่เร็วที่สุด): พนักงานขอให้ลูกค้าแสดงอีเมลยืนยันการจองบนมือถือ และใช้เครื่องสแกนยิงไปที่ QR Code
เบื้องหลัง (API & Backend):
วิธี A: Frontend ยิง API GET /api/v1/admin/bookings/search?query=สมศรี
วิธี B: Frontend (หลังจากสแกน QR Code และได้ข้อมูลหมายเลขอ้างอิง) ยิง API GET /api/v1/admin/bookings/{bookingReferenceId}
Backend: ทำการค้นหาข้อมูลในตาราง Bookings และส่งผลลัพธ์กลับไป
ขั้นตอนที่ 2: การแสดงผลและยืนยันข้อมูล (Displaying & Verifying)
สถานการณ์: ระบบค้นหาการจองของคุณสมศรีเจอ
หน้าจอ Dashboard (UI):
ระบบจะแสดงหน้า "สรุปรายละเอียดการจอง" ขึ้นมา (อาจจะเป็น Pop-up หรือหน้าใหม่)
ในหน้านี้จะแสดงข้อมูลสำคัญทั้งหมด:
รูปโปรไฟล์ (ถ้ามี), ชื่อ-นามสกุล: คุณสมศรี มีสุข
ประเภทห้อง: Onsen Room
วันที่เข้าพัก: 10 ส.ค. 2568 - 12 ส.ค. 2568 (2 คืน)
สถานะการชำระเงิน: ชำระเงินเต็มจำนวนแล้ว
กระบวนการทำงานของพนักงาน:
พนักงานทวนข้อมูลการจองกับลูกค้าเพื่อความถูกต้อง
การยืนยันตัวตน: พนักงานขอดูเอกสารยืนยันตัวตน (เช่น บัตรประชาชน, พาสปอร์ต) เพื่อเปรียบเทียบชื่อกับข้อมูลในระบบ
ขั้นตอนที่ 3: การจัดการทางการเงิน (Financial Handling)
สถานการณ์: ข้อมูลถูกต้อง พนักงานจะดำเนินการในส่วนของการเงินก่อนมอบกุญแจ
หน้าจอ Dashboard (UI):
ในหน้าสรุปการจอง จะมีส่วน "ค่าใช้จ่ายเพิ่มเติม" หรือ "เงินมัดจำ (Security Deposit)"
มีช่องให้พนักงานกรอกจำนวนเงินมัดจำที่รับมา และเลือกวิธีการรับ (เช่น เงินสด, กันวงเงินบัตรเครดิต)
กระบวนการทำงานของพนักงาน:
พนักงานแจ้งลูกค้าเกี่ยวกับนโยบายการเก็บเงินมัดจำ (เช่น "ทางเราขออนุญาตเก็บค่ามัดจำความเสียหาย 3,000 บาทนะคะ จะได้รับคืนเต็มจำนวนตอนเช็คเอาท์ค่ะ")
รับเงินมัดจำจากลูกค้า และบันทึกข้อมูลลงในระบบ
เบื้องหลัง (API & Backend):
พนักงานกดบันทึกข้อมูลเงินมัดจำ Frontend จะยิง API POST /api/v1/bookings/{bookingId}/deposit
Payload: { "amount": 3000, "method": "Cash" }
Backend: สร้างระเบียนใหม่ในตาราง Deposits ที่ผูกกับการจองนี้
ขั้นตอนที่ 4: การยืนยันการเช็คอิน (Confirming Check-in)
สถานการณ์: ทุกอย่างเรียบร้อย พร้อมให้ลูกค้าเข้าพัก
หน้าจอ Dashboard (UI):
มีปุ่มขนาดใหญ่ที่ชัดเจนว่า "ยืนยันการเช็คอิน (Confirm Check-in)"
กระบวนการทำงานของพนักงาน:
พนักงานมอบคีย์การ์ดและให้ข้อมูลเบื้องต้นเกี่ยวกับการเข้าพัก
พนักงานกดปุ่ม "ยืนยันการเช็คอิน" บนหน้าจอ
เบื้องหลัง (API & Backend - ขั้นตอนที่สำคัญที่สุด):
Frontend ยิง API POST /api/v1/bookings/{bookingId}/check-in
Backend เริ่ม Database Transaction:
UPDATE สถานะในตาราง Bookings จาก Confirmed เป็น IN_HOUSE
UPDATE สถานะของห้องพักในตาราง Inventory จาก Booked เป็น IN_HOUSE
(ทางเลือก) เชื่อมต่อระบบคีย์การ์ด: Backend อาจจะยิง API ไปยังระบบคีย์การ์ดเพื่อเปิดใช้งานคีย์การ์ดสำหรับห้องและช่วงเวลาดังกล่าว
กระจายเสียง Event: Backend ทำการ Broadcast สัญญาณ RoomStatusUpdated ผ่าน WebSocket
Payload: { "roomId": "room_uuid_104", "newStatus": "IN_HOUSE" }
Commit Transaction: ยืนยันการเปลี่ยนแปลงทั้งหมด
Flow การ Check-out โดยละเอียด
ขั้นตอนที่ 1: การเริ่มต้นกระบวนการเช็คเอาท์
สถานการณ์: ลูกค้า (คุณสมศรี) เดินทางมาที่เคาน์เตอร์เพื่อแจ้งความประสงค์ขอเช็คเอาท์
กระบวนการทำงานของพนักงาน:
พนักงานทักทายและสอบถามหมายเลขห้องพัก
พนักงานค้นหาการจองที่ยัง Active อยู่ในห้องนั้นๆ ผ่าน Dashboard (สามารถค้นหาจากหมายเลขห้อง หรือชื่อลูกค้าได้)
เบื้องหลัง (API & Backend):
Frontend ยิง API GET /api/v1/admin/bookings/active?roomNumber=104
Backend: ค้นหาการจองที่มีสถานะเป็น IN_HOUSE สำหรับห้องหมายเลข 104 และส่งข้อมูลทั้งหมดกลับมา
ขั้นตอนที่ 2: การตรวจสอบและสรุปค่าใช้จ่าย (Folio Review)
สถานการณ์: ระบบแสดงหน้าสรุปการจองของคุณสมศรี
หน้าจอ Dashboard (UI):
ระบบจะแสดงหน้า "สรุปใบแจ้งหนี้ (Folio)" ซึ่งรวมค่าใช้จ่ายทั้งหมด
รายการจะประกอบด้วย:
ค่าห้องพัก (ชำระแล้ว)
ค่าใช้จ่ายระหว่างการเข้าพัก (Incidental Charges):
ค่าอาหารและเครื่องดื่มจาก Room Service
ค่ามินิบาร์
ค่าบริการสปา
มีปุ่มให้พนักงานสามารถ "เพิ่มรายการ (Add Charge)" ได้ (เช่น ลูกค้าทำของเสียหาย)
กระบวนการทำงานของพนักงาน:
พนักงานสอบถามลูกค้าว่ามีการใช้บริการเพิ่มเติม เช่น มินิบาร์ หรือไม่
พนักงานตรวจสอบข้อมูลจากแผนกอื่น (ถ้ามี) และเพิ่มค่าใช้จ่ายลงในระบบ
พนักงานแจ้งยอดรวมสุทธิที่ต้องชำระเพิ่มเติม (ถ้ามี) ให้ลูกค้าทราบ
เบื้องหลัง (API & Backend):
Backend จะ SELECT ข้อมูลค่าใช้จ่ายทั้งหมดที่ผูกกับการจองนี้จากตาราง Charges หรือ Transactions
ถ้าพนักงานเพิ่มรายการใหม่ Frontend จะยิง POST /api/v1/bookings/{bookingId}/charge
ขั้นตอนที่ 3: การชำระเงินและคืนเงินมัดจำ (Final Settlement)
สถานการณ์: ลูกค้าพร้อมชำระเงินส่วนที่เหลือและรับเงินมัดจำคืน
กระบวนการทำงานของพนักงาน:
รับชำระเงิน: รับชำระค่าใช้จ่ายเพิ่มเติมจากลูกค้า (ถ้ามี) และบันทึกลงในระบบ
ตรวจสอบห้องพัก: พนักงานอาจจะประสานงานให้แม่บ้านขึ้นไปตรวจสอบสภาพห้องพักโดยเร็ว
คืนเงินมัดจำ: เมื่อยืนยันว่าไม่มีความเสียหาย พนักงานจะทำการคืนเงินมัดจำให้ลูกค้า
หน้าจอ Dashboard (UI) และเบื้องหลัง:
พนักงานบันทึกการชำระเงินครั้งสุดท้าย
พนักงานกดปุ่ม "คืนเงินมัดจำ (Refund Deposit)"
Frontend ยิง API POST /api/v1/bookings/{bookingId}/deposit/refund
Backend: UPDATE สถานะในตาราง Deposits เป็น Refunded
ขั้นตอนที่ 4: การยืนยันการเช็คเอาท์และกระตุ้น Flow ต่อไป
สถานการณ์: ทุกอย่างเรียบร้อย ลูกค้าพร้อมเดินทางกลับ
หน้าจอ Dashboard (UI):
มีปุ่มขนาดใหญ่ที่ชัดเจนว่า "ยืนยันการเช็คเอาท์ (Confirm Check-out)"
กระบวนการทำงานของพนักงาน:
พนักงานกล่าวขอบคุณลูกค้าและกดปุ่ม "ยืนยันการเช็คเอาท์"
เบื้องหลัง (API & Backend - ขั้นตอนที่สำคัญที่สุด):
Frontend ยิง API POST /api/v1/bookings/{bookingId}/check-out
Backend เริ่ม Database Transaction:
UPDATE สถานะในตาราง Bookings จาก IN_HOUSE เป็น COMPLETED
UPDATE สถานะของห้องพักในตาราง Inventory จาก IN_HOUSE เป็น DIRTY
กระจายเสียง Event: Backend ทำการ Broadcast สัญญาณ RoomStatusUpdated ผ่าน WebSocket
Payload: { "roomId": "room_uuid_104", "newStatus": "DIRTY" }
กระตุ้น Flow ต่อไป: Backend ส่ง Event GuestCheckedOut ไปยัง NotificationService และ HousekeepingService
Commit Transaction: ยืนยันการเปลี่ยนแปลงทั้งหมด
Flow การจัดการ Housekeeping (Housekeeping Management)
เอกสารส่วนนี้จะอธิบาย Flow การทำงานสำหรับแผนกแม่บ้าน ซึ่งเป็นกระบวนการที่เชื่อมต่อโดยตรงจากการเช็คเอาท์ของลูกค้า เพื่อให้การเตรียมห้องสำหรับลูกค้ารายต่อไปเป็นไปอย่างมีประสิทธิภาพ
ผู้เกี่ยวข้อง (Actors):
พนักงานแม่บ้าน (Housekeeping Staff)
หัวหน้าแม่บ้าน (Housekeeping Supervisor) (ถ้ามี)
เครื่องมือหลัก (Tools):
Housekeeping Dashboard (สามารถใช้งานบน Tablet หรือ Mobile ได้)
ขั้นตอนที่ 1: การแจ้งเตือนอัตโนมัติ (The Trigger)
สถานการณ์: เกิดขึ้นทันทีหลังจากพนักงานต้อนรับกดยืนยันการเช็คเอาท์
การทำงาน:
Event RoomStatusUpdated ที่มี newStatus: "DIRTY" ถูกกระจายเสียงออกไป
Housekeeping Dashboard ที่เปิดรออยู่ จะได้รับสัญญาณนี้
ห้องพักหมายเลข 104 จะปรากฏขึ้นมาในรายการ "ห้องที่ต้องทำความสะอาด" โดยอัตโนมัติ
ขั้นตอนที่ 2: การทำงานบน Housekeeping Dashboard
หน้าจอ Dashboard (UI):
แสดงรายการห้องพักในรูปแบบการ์ดที่เรียบง่าย
แต่ละการ์ดจะแสดงข้อมูล: หมายเลขห้อง, ประเภทห้อง, เวลาที่ลูกค้าเช็คเอาท์, และอาจมีหมายเหตุพิเศษ (เช่น "มีคราบไวน์บนพรม")
มีปุ่ม Action ที่ชัดเจน: "เริ่มทำความสะอาด (Start Cleaning)"
กระบวนการทำงานของพนักงานแม่บ้าน:
พนักงานแม่บ้านเลือกห้องที่ต้องการจะเข้าไปทำความสะอาด
กดปุ่ม "เริ่มทำความสะอาด" เพื่อเป็นการรับงาน และป้องกันไม่ให้แม่บ้านคนอื่นเข้ามาทำงานซ้ำซ้อน
เบื้องหลัง (API & Backend):
Frontend ยิง API POST /api/v1/admin/rooms/{roomId}/status
Payload: { "status": "CLEANING" }
Backend: อัปเดตสถานะห้องเป็น CLEANING และกระจายเสียง Event RoomStatusUpdated เพื่อให้ทุกคนเห็นว่าห้องนี้กำลังมีคนทำความสะอาดอยู่
ขั้นตอนที่ 3: การเสร็จสิ้นการทำความสะอาด
สถานการณ์: พนักงานแม่บ้านทำความสะอาดห้องเสร็จเรียบร้อย
หน้าจอ Dashboard (UI):
บนการ์ดของห้องที่กำลังทำความสะอาด จะมีปุ่ม "ทำความสะอาดเสร็จสิ้น (Mark as Clean)"
กระบวนการทำงานของพนักงานแม่บ้าน:
กดปุ่ม "ทำความสะอาดเสร็จสิ้น"
เบื้องหลัง (API & Backend):
Frontend ยิง API POST /api/v1/admin/rooms/{roomId}/status
Payload: { "status": "CLEAN" } หรือ { "status": "AWAITING_INSPECTION" } (ขึ้นอยู่กับว่ามีขั้นตอนการตรวจสอบหรือไม่)
Backend: อัปเดตสถานะห้องและกระจายเสียง Event
ขั้นตอนที่ 4: การตรวจสอบโดยหัวหน้า (Supervisor Inspection - ทางเลือก)
สถานการณ์: สำหรับโรงแรมที่ต้องการมาตรฐานสูงสุด ห้องที่ทำความสะอาดเสร็จแล้วจะต้องรอการตรวจสอบก่อน
หน้าจอ Dashboard (UI ของ Supervisor):
ห้อง 104 จะไปปรากฏในรายการ "รอการตรวจสอบ"
มีปุ่ม Action: "อนุมัติ (Approve)" และ "ตีกลับ (Reject)" (พร้อมใส่เหตุผล)
กระบวนการทำงานของหัวหน้าแม่บ้าน:
เข้าไปตรวจสอบความเรียบร้อยของห้อง
หากเรียบร้อย กด "อนุมัติ"
เบื้องหลัง (API & Backend):
Frontend ยิง API POST /api/v1/admin/rooms/{roomId}/status
Payload: { "status": "AVAILABLE" }
ขั้นตอนที่ 5: ห้องพร้อมให้บริการอีกครั้ง (Back to Available)
สถานการณ์: ห้องผ่านการทำความสะอาด (และอาจจะผ่านการตรวจสอบ) เรียบร้อยแล้ว
การทำงาน:
สถานะสุดท้ายของห้องในฐานข้อมูลถูก UPDATE เป็น AVAILABLE
Backend กระจายเสียง Event สุดท้าย: RoomStatusUpdated
Payload: { "roomId": "room_uuid_104", "newStatus": "AVAILABLE" }
ผลลัพธ์:
บน Occupancy Dashboard ของพนักงานต้อนรับ การ์ดของห้อง 104 จะเปลี่ยนเป็น สีเขียว (Available)
ห้องพักนี้พร้อมที่จะถูกจองโดยลูกค้ารายต่อไปในระบบทันที วงจรการทำงานจึงครบรอบอย่างสมบูรณ์
ผลลัพธ์: การอัปเดตสถานะแบบ Real-time และการทำงานที่ต่อเนื่อง
หน้าจอ Dashboard ของพนักงานต้อนรับ:
การ์ดของห้อง 104 จะเปลี่ยนสี/ป้ายสถานะ จาก "In-House" (สีน้ำเงินเข้ม) กลายเป็น "Dirty" (สีส้ม) ทันที
หน้าจอ Dashboard ของแผนกแม่บ้าน:
ห้อง 104 จะปรากฏขึ้นมาในรายการ "ห้องที่ต้องทำความสะอาด" โดยอัตโนมัติ
ระบบส่งอีเมลอัตโนมัติ:
EmailService จะส่ง "อีเมลขอบคุณและขอรีวิว" ให้กับคุณสมศรีในอีก 1-2 วันถัดไป
ด้วย Flow นี้ กระบวนการเช็คเอาท์จะเชื่อมต่อกับการทำงานของแผนกอื่นได้อย่างราบรื่นและเป็นอัตโนมัติ ทำให้โรงแรมของคุณสามารถเตรียมห้องสำหรับลูกค้ารายต่อไปได้อย่างรวดเร็ว


