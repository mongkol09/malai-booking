การแก้ไขการจอง
ภาพรวม: กระบวนการ 2 ขั้นตอน (Two-Step Process)
เพื่อประสบการณ์ที่ดีที่สุดและป้องกันความสับสน เราจะออกแบบกระบวนการแก้ไขให้เป็น 2 ขั้นตอนหลัก:
ขั้นที่ 1: การขอใบเสนอราคา (Get a Quote): ลูกค้า/แอดมินลองเปลี่ยนเงื่อนไข และระบบจะคำนวณ "ส่วนต่างราคา" ให้ดูก่อน โดยยังไม่มีการเปลี่ยนแปลงใดๆ เกิดขึ้นจริง
ขั้นที่ 2: การยืนยันการเปลี่ยนแปลง (Confirm Modification): หลังจากเห็นส่วนต่างแล้ว ลูกค้า/แอดมินจึงกดยืนยันเพื่อทำการเปลี่ยนแปลงและชำระเงิน (ถ้ามี)
กระบวนการนี้ช่วยลดความผิดพลาดและทำให้ลูกค้าเข้าใจผลกระทบของการเปลี่ยนแปลงก่อนตัดสินใจ
API ขั้นที่ 1: การขอใบเสนอราคาสำหรับการแก้ไข (Get Modification Quote)
Endpoint: POST /api/v1/bookings/{bookingId}/modification-quote
Purpose: เพื่อคำนวณผลกระทบทางการเงินของการเปลี่ยนแปลงที่ต้องการ โดยไม่ทำการบันทึกข้อมูลใดๆ
Authentication: ต้องใช้ Token ของลูกค้าเจ้าของการจอง หรือ Token ของแอดมิน
Request Payload:
{
  "newCheckinDate": "2025-11-21", // วันที่เช็คอินใหม่
  "newCheckoutDate": "2025-11-23", // วันที่เช็คเอาท์ใหม่
  "newRoomTypeId": "onsen_room_uuid" // ประเภทห้องใหม่ (ถ้าต้องการอัปเกรด)
}

Backend Logic การทำงาน:
ดึงข้อมูลการจองเดิม: SELECT * FROM Bookings WHERE booking_id = {bookingId} เพื่อนำ original_price มาใช้
ตรวจสอบห้องว่าง: เรียกใช้ Logic เดียวกับ GET /api/v1/public/availability ด้วยเงื่อนไขใหม่ (newCheckinDate, newCheckoutDate, newRoomTypeId) เพื่อดูว่าห้องว่างหรือไม่ และดึงราคาใหม่ ณ ปัจจุบันออกมา
ถ้าห้องไม่ว่าง: ตอบกลับด้วย Error Message ทันทีว่า "ขออภัย, ห้องพักที่ท่านเลือกในช่วงเวลาใหม่ไม่ว่างแล้ว"
คำนวณราคาใหม่: ถ้ารอด ระบบจะได้ new_total_price จากการคำนวณ
คำนวณส่วนต่าง: price_difference = new_total_price - original_price
สร้าง "เจตนาการแก้ไข" (Modification Intent): สร้าง Record ชั่วคราว (มีอายุ 10 นาที) ที่เก็บข้อมูลทั้งหมดนี้ไว้ พร้อม modification_intent_id
Response Payload:
{
  "isAvailable": true,
  "modificationIntentId": "mod_intent_uuid_789",
  "originalPrice": 12000.50,
  "newPrice": 15500.00,
  "priceDifference": 3499.50, // ค่าเป็นบวก หมายถึงต้องจ่ายเพิ่ม
  "currency": "THB",
  "summary": "คุณกำลังเปลี่ยนการเข้าพักเป็นวันที่ 21-23 พ.ย. ในห้อง Onsen Room มีค่าใช้จ่ายเพิ่มเติม 3,499.50 บาท"
}

ถ้า priceDifference เป็นลบ: หมายถึงลูกค้าจะได้รับเงินคืน
ถ้า priceDifference เป็นศูนย์: หมายถึงราคาเท่าเดิม
API ขั้นที่ 2: การยืนยันการแก้ไข (Confirm Modification)
Endpoint: POST /api/v1/bookings/{bookingId}/confirm-modification
Purpose: เพื่อทำการเปลี่ยนแปลงการจองอย่างถาวรหลังจากที่ผู้ใช้ยอมรับใบเสนอราคาแล้ว
Authentication: ต้องใช้ Token ของลูกค้าเจ้าของการจอง หรือ Token ของแอดมิน
Request Payload:
{
  "modificationIntentId": "mod_intent_uuid_789",
  // กรณีต้องจ่ายเพิ่ม ต้องแนบ Token การชำระเงินมาด้วย
  "paymentToken": "tokn_test_123456789" // (ถ้า priceDifference > 0)
}

Backend Logic การทำงาน:
ตรวจสอบ Intent: ค้นหา modification_intent_id ในฐานข้อมูล และตรวจสอบว่ายังไม่หมดอายุ
เริ่ม Database Transaction: เพื่อรับประกันว่าทุกขั้นตอนจะสำเร็จทั้งหมด หรือล้มเหลวทั้งหมด
จัดการการชำระเงิน (ถ้ามี):
ถ้าต้องจ่ายเพิ่ม: ใช้ paymentToken เพื่อเรียก API ของ Payment Gateway เพื่อชำระเงินส่วนต่าง
ถ้าต้องคืนเงิน: เรียก API refund ของ Payment Gateway หรือสร้างรายการรอคืนเงินให้แอดมิน
อัปเดตการจอง: UPDATE ตาราง Bookings ด้วยข้อมูลใหม่ (วันที่ใหม่, ประเภทห้องใหม่, ราคาใหม่)
อัปเดต Inventory: ปรับปรุงสถานะของห้องในวันเก่าและวันใหม่ (ปล่อยห้องวันเก่า, จองห้องวันใหม่)
ลบ Intent: ลบ modification_intent ที่ใช้แล้วทิ้ง
สร้าง Log: บันทึกการเปลี่ยนแปลงนี้ลงใน AuditLog
ส่งอีเมลยืนยัน: เรียก EmailService เพื่อส่ง "อีเมลยืนยันการแก้ไขการจอง" ให้ลูกค้า
Commit Transaction: ยืนยันการเปลี่ยนแปลงทั้งหมดในฐานข้อมูล
Response Payload (Success):
{
  "success": true,
  "message": "การแก้ไขการจองของคุณเสร็จสมบูรณ์",
  "updatedBooking": {
    // รายละเอียดการจองใหม่ทั้งหมด
  }
}

ด้วยสถาปัตยกรรมแบบ 2 ขั้นตอนนี้ คุณจะสามารถสร้างประสบการณ์การแก้ไขการจองที่โปร่งใส, ปลอดภัย, และเป็นมิตรกับผู้ใช้งานได้อย่างสมบูรณ์แบบครับ

