1. สิ่งที่เรากำลังจะสร้าง (What We Are Building)
เรากำลังจะสร้าง "ระบบบริหารจัดการโรงแรมระดับ Enterprise แบบครบวงจร" ซึ่งประกอบด้วย 3 ส่วนหลักที่ทำงานร่วมกันในโครงสร้างแบบ Monorepo:

apps/web (เว็บไซต์สำหรับลูกค้า):

สร้างด้วย Next.js เพื่อให้ทำ SEO ได้ดีเยี่ยมและโหลดเร็ว

เป็นที่ที่ลูกค้าเข้ามาค้นหาห้องพัก, เห็นราคาที่เปลี่ยนแปลงได้ (Dynamic Price), ทำการจอง, ชำระเงิน, และรับอีเมลยืนยัน

apps/admin (Admin Dashboard):

ใช้ React Template "HotelAir" ที่คุณมีอยู่

เป็นศูนย์กลางควบคุมสำหรับพนักงานทุกระดับ ตั้งแต่การดูสถานะห้อง, จัดการการจอง, เช็คอิน/เช็คเอาท์, ไปจนถึงการตั้งค่าระบบทั้งหมด

apps/api (Backend API):

เป็น "สมอง" ของระบบทั้งหมด สร้างด้วย Node.js

ทำหน้าที่เชื่อมต่อกับฐานข้อมูล, ประมวลผล Logic ที่ซับซ้อนทั้งหมด (เช่น การคำนวณราคา), และดูแลเรื่องความปลอดภัย

โดยมีฟังก์ชันหัวใจสำคัญที่เราออกแบบไว้คือ:

ระบบ Dynamic Pricing: เครื่องมือปรับราคาห้องพักอัตโนมัติตามกฎที่เราสร้างขึ้น (เช่น ตามอัตราการเข้าพัก, วันหยุด, หรือการจองล่วงหน้า)

วงจรการจองที่สมบูรณ์: ตั้งแต่การจอง, การแก้ไข/ยกเลิก, การสื่อสารก่อนเข้าพัก, และการติดตามผลหลังเข้าพัก

การปฏิบัติการในโรงแรม: Flow การ Check-in, Check-out, และการจัดการแม่บ้าน (Housekeeping) ที่เชื่อมต่อกันอย่างเป็นระบบ

ระบบหลังบ้านที่ทรงพลัง: การจัดการสิทธิ์ผู้ใช้งาน (Role Permission), ระบบการเงินและบัญชี, และ Dashboard สำหรับผู้บริหารเพื่อดูรายงานวิเคราะห์ข้อมูล (KPIs)

ความปลอดภัย: มีมาตรการป้องกันหลายชั้น (Defense in Depth) เพื่อปกป้องข้อมูลของลูกค้าและธุรกิจ

2. สิ่งที่ AI จะต้องรู้จากเรา (What the AI Needs from Us)
เพื่อให้การ "vibe code" หรือการใช้ AI ช่วยเขียนโค้ดมีประสิทธิภาพสูงสุด เราไม่สามารถสั่งแค่ว่า "สร้างระบบจองโรงแรม" ได้ แต่เราต้องให้ "พิมพ์เขียว (Blueprint)" ที่เราออกแบบร่วมกันไปเป็นบริบทให้ AI ครับ

นี่คือตัวอย่างสิ่งที่เราต้องบอก AI ในแต่ละขั้นตอน:

เมื่อสร้างฐานข้อมูล:

เราต้องบอก: "จงสร้าง Schema ฐานข้อมูล PostgreSQL โดยอิงตามโครงสร้างตาราง CancellationPolicies และ CancellationPolicyRules ที่เราออกแบบไว้ โดย policy_id เป็น Foreign Key"

เมื่อสร้าง API:

เราต้องบอก: "จงสร้าง API Endpoint POST /api/v1/bookings/{bookingId}/modification-quote ที่รับข้อมูล newCheckinDate และ newCheckoutDate จากนั้นให้คำนวณส่วนต่างราคา และตอบกลับเป็น JSON ที่มีโครงสร้างแบบนี้..." (พร้อมแนบตัวอย่าง JSON ที่เราออกแบบไว้)

เมื่อสร้าง Logic ที่ซับซ้อน:

เราต้องบอก: "จงสร้าง Cron Job สำหรับ DynamicPricingRecalculationJob ที่จะทำงานทุกคืน โดยมี Logic คือ 1. ดึงกฎทั้งหมดจาก PricingRules 2. วนลูปแต่ละวันในอนาคต 3. คำนวณ Occupancy 4. นำไปเทียบกับเงื่อนไขของกฎ และ 5. อัปเดตราคา"

เมื่อสร้าง Frontend:

เราต้องบอก: "จงสร้าง React Component สำหรับหน้าจัดการสิทธิ์ โดยดึงข้อมูลจาก API GET /api/v1/admin/roles/{roleId} แล้วนำข้อมูล permissions มาเก็บใน State จากนั้นให้สร้างตารางที่มี Checkbox โดยผูกค่า checked และ onChange เข้ากับ State นั้นๆ"

เมื่อคำนึงถึงความปลอดภัย:

เราต้องบอก: "ทุกครั้งที่สร้างฟังก์ชันที่ต้อง Query ฐานข้อมูลโดยใช้ข้อมูลจากผู้ใช้ จะต้องใช้ Parameterized Queries เพื่อป้องกัน SQL Injection" หรือ "ทุกครั้งที่สร้างฟังก์ชันจัดการรหัสผ่าน จะต้องใช้ bcrypt ในการ Hashing"


ศึกษา Requirements ที่อยู่ใน D:\Hotel_booking\project_requirement
