// üîç Database Room Types & Booking Data Checker
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• RoomType ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkDatabaseData() {
  try {
    console.log('üè® DATABASE DATA ANALYSIS');
    console.log('='.repeat(60));
    
    // ========================================
    // 1. ‡πÄ‡∏ä‡πá‡∏Ñ Room Types ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    // ========================================
    console.log('\nüè† ROOM TYPES ANALYSIS:');
    console.log('-'.repeat(40));
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ Table Room ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    try {
      const roomCount = await prisma.room.count();
      console.log(`üìä Total Rooms: ${roomCount}`);
      
      if (roomCount > 0) {
        // ‡∏î‡∏π Room Types ‡∏ó‡∏µ‡πà‡∏°‡∏µ
        const roomTypes = await prisma.room.groupBy({
          by: ['type'],
          _count: {
            type: true
          }
        });
        
        console.log('\nüìã Room Types Available:');
        roomTypes.forEach((roomType, index) => {
          console.log(`${index + 1}. ${roomType.type}: ${roomType._count.type} rooms`);
        });
        
        // ‡∏î‡∏π‡∏ï‡∏≠‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Room ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        console.log('\nüè† Sample Rooms by Type:');
        for (const roomType of roomTypes) {
          const sampleRoom = await prisma.room.findFirst({
            where: { type: roomType.type },
            select: {
              id: true,
              number: true,
              type: true,
              price: true,
              capacity: true,
              status: true,
              amenities: true
            }
          });
          
          if (sampleRoom) {
            console.log(`\nüìç ${roomType.type.toUpperCase()}:`);
            console.log(`   ID: ${sampleRoom.id}`);
            console.log(`   Number: ${sampleRoom.number || 'N/A'}`);
            console.log(`   Price: ‡∏ø${sampleRoom.price || 'N/A'}`);
            console.log(`   Capacity: ${sampleRoom.capacity || 'N/A'} guests`);
            console.log(`   Status: ${sampleRoom.status || 'N/A'}`);
            console.log(`   Amenities: ${sampleRoom.amenities || 'N/A'}`);
          }
        }
      } else {
        console.log('‚ö†Ô∏è  No rooms found in database');
      }
    } catch (error) {
      console.log('‚ùå Room table not found or error:', error.message);
    }
    
    // ========================================
    // 2. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    // ========================================
    console.log('\n\nüìã RECENT BOOKINGS ANALYSIS:');
    console.log('-'.repeat(40));
    
    const bookingCount = await prisma.booking.count();
    console.log(`üìä Total Bookings: ${bookingCount}`);
    
    if (bookingCount > 0) {
      // ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      const recentBookings = await prisma.booking.findMany({
        orderBy: { createdAt: 'desc' },
        take: 5,
        select: {
          id: true,
          bookingReferenceId: true,
          customerName: true,
          customerEmail: true,
          roomId: true,
          roomType: true,
          checkInDate: true,
          checkOutDate: true,
          totalAmount: true,
          status: true,
          specialRequests: true,
          createdAt: true
        }
      });
      
      console.log('\nüìã 5 Most Recent Bookings:');
      recentBookings.forEach((booking, index) => {
        console.log(`\n${index + 1}. ${booking.customerName || 'Unknown Customer'}`);
        console.log(`   üìÑ Ref: ${booking.bookingReferenceId || booking.id}`);
        console.log(`   üìß Email: ${booking.customerEmail || 'N/A'}`);
        console.log(`   üè† Room: ${booking.roomId} (${booking.roomType || 'Unknown type'})`);
        console.log(`   üìÖ Dates: ${booking.checkInDate} ‚Üí ${booking.checkOutDate}`);
        console.log(`   üí∞ Amount: ‡∏ø${booking.totalAmount || 0}`);
        console.log(`   üìä Status: ${booking.status || 'N/A'}`);
        console.log(`   üìù Requests: ${booking.specialRequests || 'None'}`);
        console.log(`   üïê Created: ${booking.createdAt}`);
      });
      
      // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏° Room Type
      console.log('\n\nüìä Booking Statistics by Room Type:');
      console.log('-'.repeat(40));
      
      const bookingStats = await prisma.booking.groupBy({
        by: ['roomType'],
        _count: {
          roomType: true
        },
        _sum: {
          totalAmount: true
        }
      });
      
      bookingStats.forEach((stat, index) => {
        console.log(`${index + 1}. ${stat.roomType || 'Unknown'}: ${stat._count.roomType} bookings, ‡∏ø${stat._sum.totalAmount || 0} total`);
      });
      
    } else {
      console.log('‚ö†Ô∏è  No bookings found in database');
    }
    
    // ========================================
    // 3. ‡πÄ‡∏ä‡πá‡∏Ñ Guest ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    // ========================================
    console.log('\n\nüë• GUEST ANALYSIS:');
    console.log('-'.repeat(40));
    
    try {
      const guestCount = await prisma.guest.count();
      console.log(`üìä Total Guests: ${guestCount}`);
      
      if (guestCount > 0) {
        const recentGuests = await prisma.guest.findMany({
          orderBy: { createdAt: 'desc' },
          take: 3,
          select: {
            id: true,
            firstName: true,
            lastName: true,
            email: true,
            phone: true,
            nationality: true,
            createdAt: true
          }
        });
        
        console.log('\nüë• Recent Guests:');
        recentGuests.forEach((guest, index) => {
          console.log(`${index + 1}. ${guest.firstName} ${guest.lastName}`);
          console.log(`   üìß ${guest.email}`);
          console.log(`   üì± ${guest.phone || 'N/A'}`);
          console.log(`   üåç ${guest.nationality || 'N/A'}`);
          console.log(`   üïê ${guest.createdAt}`);
        });
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  Guest table not found or error:', error.message);
    }
    
    // ========================================
    // 4. Database Schema Info
    // ========================================
    console.log('\n\nüóÑÔ∏è  DATABASE SCHEMA INFO:');
    console.log('-'.repeat(40));
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    const tableQueries = [
      'SELECT COUNT(*) as count FROM "Booking"',
      'SELECT COUNT(*) as count FROM "Guest"',
      'SELECT COUNT(*) as count FROM "Room"',
      'SELECT COUNT(*) as count FROM "Payment"',
      'SELECT COUNT(*) as count FROM "User"'
    ];
    
    const tableNames = ['Booking', 'Guest', 'Room', 'Payment', 'User'];
    
    for (let i = 0; i < tableQueries.length; i++) {
      try {
        const result = await prisma.$queryRawUnsafe(tableQueries[i]);
        console.log(`üìä ${tableNames[i]}: ${result[0].count} records`);
      } catch (error) {
        console.log(`‚ùå ${tableNames[i]}: Table not found or error`);
      }
    }
    
    console.log('\nüéØ Analysis Complete!');
    console.log('='.repeat(60));
    
  } catch (error) {
    console.error('üí• Error analyzing database:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
checkDatabaseData();
