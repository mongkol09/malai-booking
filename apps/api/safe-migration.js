const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function safeMigration() {
  try {
    console.log('üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ Migration ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢...\n');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô migration
    const bookingCount = await prisma.booking.count();
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô booking ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${bookingCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö booking ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const criticalBooking = await prisma.booking.findUnique({
      where: { id: '1ca95546-d9b7-450f-b2c2-a8fbe58e8689' },
      include: { guest: true, room: true }
    });

    if (criticalBooking) {
      console.log('‚úÖ ‡∏û‡∏ö booking ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç BK24957122');
    } else {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö booking ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!');
      return;
    }

    console.log('\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° migration...');

    // Step 1: ‡πÄ‡∏û‡∏¥‡πà‡∏° columns ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    console.log('1. ‡πÄ‡∏û‡∏¥‡πà‡∏° archive columns...');
    await prisma.$executeRaw`
      ALTER TABLE bookings ADD COLUMN IF NOT EXISTS is_archived BOOLEAN DEFAULT FALSE;
    `;
    await prisma.$executeRaw`
      ALTER TABLE bookings ADD COLUMN IF NOT EXISTS archived_at TIMESTAMP;
    `;
    await prisma.$executeRaw`
      ALTER TABLE bookings ADD COLUMN IF NOT EXISTS archived_reason VARCHAR(255);
    `;
    await prisma.$executeRaw`
      ALTER TABLE bookings ADD COLUMN IF NOT EXISTS archived_by TEXT;
    `;

    // Step 2: ‡πÄ‡∏û‡∏¥‡πà‡∏° performance columns
    console.log('2. ‡πÄ‡∏û‡∏¥‡πà‡∏° performance columns...');
    await prisma.$executeRaw`
      ALTER TABLE bookings ADD COLUMN IF NOT EXISTS guest_name VARCHAR(255);
    `;
    await prisma.$executeRaw`
      ALTER TABLE bookings ADD COLUMN IF NOT EXISTS guest_email VARCHAR(255);
    `;
    await prisma.$executeRaw`
      ALTER TABLE bookings ADD COLUMN IF NOT EXISTS guest_phone VARCHAR(50);
    `;
    await prisma.$executeRaw`
      ALTER TABLE bookings ADD COLUMN IF NOT EXISTS room_number VARCHAR(50);
    `;
    await prisma.$executeRaw`
      ALTER TABLE bookings ADD COLUMN IF NOT EXISTS room_type_name VARCHAR(100);
    `;
    await prisma.$executeRaw`
      ALTER TABLE bookings ADD COLUMN IF NOT EXISTS stay_nights INTEGER;
    `;

    // Step 3: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    console.log('3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• derived fields...');
    
    const bookings = await prisma.booking.findMany({
      include: {
        guest: true,
        room: {
          include: { roomType: true }
        }
      }
    });

    for (const booking of bookings) {
      const stayNights = Math.ceil(
        (booking.checkoutDate - booking.checkinDate) / (1000 * 60 * 60 * 24)
      );

      await prisma.$executeRaw`
        UPDATE bookings SET 
          is_archived = FALSE,
          guest_name = ${`${booking.guest.firstName} ${booking.guest.lastName}`},
          guest_email = ${booking.guest.email},
          guest_phone = ${booking.guest.phoneNumber || ''},
          room_number = ${booking.room.roomNumber},
          room_type_name = ${booking.room.roomType.name},
          stay_nights = ${stayNights}
        WHERE booking_id = ${booking.id};
      `;
    }

    // Step 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á indexes
    console.log('4. ‡∏™‡∏£‡πâ‡∏≤‡∏á performance indexes...');
    await prisma.$executeRaw`
      CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bookings_is_archived 
      ON bookings (is_archived);
    `;
    await prisma.$executeRaw`
      CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bookings_archived_status 
      ON bookings (is_archived, status);
    `;

    // Step 5: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    console.log('\n‚úÖ Migration ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå...');
    
    const finalBookingCount = await prisma.booking.count();
    const finalCriticalBooking = await prisma.booking.findUnique({
      where: { id: '1ca95546-d9b7-450f-b2c2-a8fbe58e8689' }
    });

    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô booking ‡∏´‡∏•‡∏±‡∏á migration: ${finalBookingCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`‚úÖ Booking ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ${finalCriticalBooking ? '‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢' : '‡∏´‡∏≤‡∏¢‡πÑ‡∏õ!'}`);

    if (finalCriticalBooking) {
      console.log(`   üìã BK24957122: ${finalCriticalBooking.bookingReferenceId}`);
      console.log(`   üì¶ Is Archived: ${finalCriticalBooking.isArchived || 'false'}`);
    }

    console.log('\nüéâ Migration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢!');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ migration:', error);
    console.log('\nüõ°Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ ADD COLUMN IF NOT EXISTS');
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

safeMigration().catch(console.error);