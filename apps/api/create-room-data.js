const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function createRoomData() {
  console.log('üè® ===== ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà =====');
  
  try {
    // 1. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö foreign key
    console.log('üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤...');
    
    // ‡∏•‡∏ö Daily Availability ‡∏Å‡πà‡∏≠‡∏ô
    await prisma.dailyAvailability.deleteMany({});
    console.log('‚úÖ ‡∏•‡∏ö Daily Availability ‡πÅ‡∏•‡πâ‡∏ß');
    
    // ‡∏•‡∏ö Daily Room Rates
    await prisma.dailyRoomRate.deleteMany({});
    console.log('‚úÖ ‡∏•‡∏ö Daily Room Rates ‡πÅ‡∏•‡πâ‡∏ß');
    
    // ‡∏•‡∏ö Bookings ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    await prisma.booking.deleteMany({});
    console.log('‚úÖ ‡∏•‡∏ö Bookings ‡πÅ‡∏•‡πâ‡∏ß');
    
    // ‡∏•‡∏ö Rooms
    await prisma.room.deleteMany({});
    console.log('‚úÖ ‡∏•‡∏ö Rooms ‡πÅ‡∏•‡πâ‡∏ß');
    
    // ‡∏•‡∏ö Room Types
    await prisma.roomType.deleteMany({});
    console.log('‚úÖ ‡∏•‡∏ö Room Types ‡πÅ‡∏•‡πâ‡∏ß');
    
    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Room Types ‡πÉ‡∏´‡∏°‡πà
    console.log('üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á Room Types...');
    
    const roomTypesData = [
      {
        name: 'Cinnamon Room',
        description: '‡∏´‡πâ‡∏≠‡∏á‡∏ã‡∏¥‡∏ô‡∏ô‡∏≤‡∏°‡∏≠‡∏ô - ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏π‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô',
        baseRate: 15000, // ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô baseRate
        capacityAdults: 2, // ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô capacityAdults
        bedType: 'King Bed',
        sizeSqm: 35, // ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô sizeSqm
        amenities: ['Air Conditioning', 'Private Bathroom', 'Wi-Fi', 'Mini Bar', 'TV'],
        imageUrl: 'cinnamon-room-1.jpg'
      },
      {
        name: 'Basil Room',
        description: '‡∏´‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏£‡∏∞‡∏û‡∏≤ - ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏™‡∏∏‡∏î‡∏´‡∏£‡∏π‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥',
        baseRate: 15000,
        capacityAdults: 2,
        bedType: 'King Bed',
        sizeSqm: 30,
        amenities: ['Air Conditioning', 'Private Bathroom', 'Wi-Fi', 'Balcony', 'TV'],
        imageUrl: 'basil-room-1.jpg'
        roomSize: 35,
        features: ['Air Conditioning', 'Private Bathroom', 'Wi-Fi', 'Mini Bar', 'TV'],
        images: ['basil-room-1.jpg']
      },
      {
        name: 'Bergamot Room',
        description: '‡∏´‡πâ‡∏≠‡∏á‡∏°‡∏∞‡∏Å‡∏£‡∏π‡∏î - ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏π‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÑ‡∏ó‡∏¢‡∏£‡πà‡∏ß‡∏°‡∏™‡∏°‡∏±‡∏¢',
        basePrice: 15000,
        maxGuests: 2,
        bedType: 'King Bed',
        roomSize: 35,
        features: ['Air Conditioning', 'Private Bathroom', 'Wi-Fi', 'Mini Bar', 'TV'],
        images: ['bergamot-room-1.jpg']
      },
      {
        name: 'Jasmine Room',
        description: '‡∏´‡πâ‡∏≠‡∏á‡∏°‡∏∞‡∏•‡∏¥ - ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏¥‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏´‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏°‡∏∞‡∏•‡∏¥',
        basePrice: 15000,
        maxGuests: 2,
        bedType: 'King Bed',
        roomSize: 35,
        features: ['Air Conditioning', 'Private Bathroom', 'Wi-Fi', 'Mini Bar', 'TV'],
        images: ['jasmine-room-1.jpg']
      },
      {
        name: 'Rose Room',
        description: '‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏∏‡∏´‡∏•‡∏≤‡∏ö - ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÇ‡∏£‡πÅ‡∏°‡∏ô‡∏ï‡∏¥‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å',
        basePrice: 15000,
        maxGuests: 2,
        bedType: 'King Bed',
        roomSize: 35,
        features: ['Air Conditioning', 'Private Bathroom', 'Wi-Fi', 'Mini Bar', 'TV'],
        images: ['rose-room-1.jpg']
      },
      {
        name: 'Ginger Room',
        description: '‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡∏¥‡∏á - ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏™‡∏ö‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡∏Ç‡∏¥‡∏á‡∏´‡∏≠‡∏°‡∏Å‡∏£‡∏∏‡πà‡∏ô',
        basePrice: 7500,
        maxGuests: 2,
        bedType: 'Queen Bed',
        roomSize: 25,
        features: ['Air Conditioning', 'Private Bathroom', 'Wi-Fi', 'TV'],
        images: ['ginger-room-1.jpg']
      },
      {
        name: 'Lemongrass Room',
        description: '‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏∞‡πÑ‡∏Ñ‡∏£‡πâ - ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÅ‡∏™‡∏ô‡∏™‡∏ö‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏´‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏∞‡πÑ‡∏Ñ‡∏£‡πâ',
        basePrice: 7500,
        maxGuests: 2,
        bedType: 'Queen Bed',
        roomSize: 25,
        features: ['Air Conditioning', 'Private Bathroom', 'Wi-Fi', 'TV'],
        images: ['lemongrass-room-1.jpg']
      },
      {
        name: 'Private House',
        description: '‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß - ‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏±‡∏Å‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß',
        basePrice: 28900,
        maxGuests: 6,
        bedType: 'Multiple Beds',
        roomSize: 80,
        features: ['Air Conditioning', 'Private Bathroom', 'Wi-Fi', 'Kitchen', 'Living Room', 'Private Pool'],
        images: ['private-house-1.jpg']
      }
    ];

    const createdRoomTypes = [];
    for (const roomTypeData of roomTypesData) {
      const roomType = await prisma.roomType.create({
        data: {
          name: roomTypeData.name,
          description: roomTypeData.description,
          baseRate: roomTypeData.basePrice,  // ‡πÉ‡∏ä‡πâ baseRate ‡πÅ‡∏ó‡∏ô basePrice
          capacityAdults: roomTypeData.maxGuests,
          capacityChildren: 0,
          sizeSqm: roomTypeData.roomSize,
          bedType: roomTypeData.bedType,
          amenities: roomTypeData.features,
          isActive: true
        }
      });
      createdRoomTypes.push(roomType);
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Room Type: ${roomType.name} (${roomType.baseRate} ‡∏ö‡∏≤‡∏ó)`);
    }

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    console.log('\nüè† ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å...');
    
    const roomsToCreate = [
      // Cinnamon Room - 1 ‡∏´‡∏•‡∏±‡∏á
      { roomTypeId: createdRoomTypes[0].id, roomNumber: 'C1' },
      
      // Basil Room - 1 ‡∏´‡∏•‡∏±‡∏á
      { roomTypeId: createdRoomTypes[1].id, roomNumber: 'B1' },
      
      // Bergamot Room (B ‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡πÑ‡∏ó‡∏¢) - 1 ‡∏´‡∏•‡∏±‡∏á  
      { roomTypeId: createdRoomTypes[2].id, roomNumber: 'B2' },
      
      // Jasmine Room - 1 ‡∏´‡∏•‡∏±‡∏á
      { roomTypeId: createdRoomTypes[3].id, roomNumber: 'C2' },
      
      // Rose Room - 1 ‡∏´‡∏•‡∏±‡∏á
      { roomTypeId: createdRoomTypes[4].id, roomNumber: 'D1' },
      
      // Ginger Room - 3 ‡∏´‡∏•‡∏±‡∏á
      { roomTypeId: createdRoomTypes[5].id, roomNumber: 'E1' },
      { roomTypeId: createdRoomTypes[5].id, roomNumber: 'E2' },
      { roomTypeId: createdRoomTypes[5].id, roomNumber: 'E3' },
      
      // Lemongrass Room - 3 ‡∏´‡∏•‡∏±‡∏á
      { roomTypeId: createdRoomTypes[6].id, roomNumber: 'F1' },
      { roomTypeId: createdRoomTypes[6].id, roomNumber: 'F2' },
      { roomTypeId: createdRoomTypes[6].id, roomNumber: 'F3' },
      
      // Private House - 1 ‡∏´‡∏•‡∏±‡∏á
      { roomTypeId: createdRoomTypes[7].id, roomNumber: 'PH01' }
    ];

    const createdRooms = [];
    for (const roomData of roomsToCreate) {
      const room = await prisma.room.create({
        data: {
          roomNumber: roomData.roomNumber,
          status: 'Available',
          roomTypeId: roomData.roomTypeId,
          notes: `‡∏´‡πâ‡∏≠‡∏á ${roomData.roomNumber} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£`
        },
        include: {
          roomType: true
        }
      });
      createdRooms.push(room);
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á: ${room.roomNumber} (${room.roomType.name}) - ${room.roomType.baseRate} ‡∏ö‡∏≤‡∏ó`);
    }

    // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Daily Room Rates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ‡∏ô‡∏µ‡πâ
    console.log('\nüí∞ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô...');
    
    const startDate = new Date('2024-01-01');
    const endDate = new Date('2024-12-31');
    let currentDate = new Date(startDate);
    
    const dailyRates = [];
    while (currentDate <= endDate) {
      for (const roomType of createdRoomTypes) {
        dailyRates.push({
          roomTypeId: roomType.id,
          date: new Date(currentDate),
          currentRate: roomType.baseRate, // ‡πÉ‡∏ä‡πâ currentRate
          availability: 5 // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á 5 ‡∏´‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
        });
      }
      currentDate.setDate(currentDate.getDate() + 1);
    }
    
    // Insert daily rates in batches
    const batchSize = 100;
    for (let i = 0; i < dailyRates.length; i += batchSize) {
      const batch = dailyRates.slice(i, i + batchSize);
      await prisma.dailyRoomRate.createMany({
        data: batch,
        skipDuplicates: true
      });
    }
    
    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ${dailyRates.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

    // 5. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    console.log('\nüéØ ===== ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á =====');
    
    const summary = await prisma.roomType.findMany({
      include: {
        rooms: {
          select: {
            roomNumber: true,
            status: true
          }
        },
        _count: {
          select: {
            rooms: true
          }
        }
      },
      orderBy: {
        baseRate: 'desc'
      }
    });

    summary.forEach((roomType, index) => {
      console.log(`${index + 1}. ${roomType.name}`);
      console.log(`   üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${roomType.baseRate.toLocaleString()} ‡∏ö‡∏≤‡∏ó`);
      console.log(`   üè† ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á: ${roomType._count.rooms} ‡∏´‡πâ‡∏≠‡∏á`);
      console.log(`   üö™ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á: ${roomType.rooms.map(r => r.roomNumber).join(', ')}`);
      console.log('');
    });

    console.log('üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    
    return {
      roomTypes: createdRoomTypes.length,
      rooms: createdRooms.length,
      dailyRates: dailyRates.length
    };

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
if (require.main === module) {
  createRoomData()
    .then((result) => {
      console.log(`\n‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏™‡∏£‡πâ‡∏≤‡∏á ${result.roomTypes} ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á, ${result.rooms} ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å, ${result.dailyRates} ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô`);
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
      process.exit(1);
    });
}

module.exports = { createRoomData };