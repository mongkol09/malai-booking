import { Telegraf } from 'telegraf';

/**
 * Dual Bot Telegram Service
 * ‡πÅ‡∏¢‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Executive Level ‡πÅ‡∏•‡∏∞ Operational Level
 */

interface BotConfig {
  token: string;
  chatId: string;
  level: 'executive' | 'operational';
  notifications: string[];
}

interface ExecutiveNotification {
  type: 'booking' | 'payment' | 'revenue' | 'cancellation';
  data: {
    bookingId: string;
    customerName: string;
    totalAmount: number;
    paymentStatus: string;
    roomType: string;
    dates: { checkIn: Date; checkOut: Date };
    contactInfo: { email: string; phone: string };
    specialRequests?: string;
  };
}

interface OperationalNotification {
  type: 'housekeeping' | 'checkin' | 'checkout' | 'room_status';
  data: {
    roomNumber: string;
    guestName: string; // First name only for privacy
    action: string;
    time: Date;
    priority: 'high' | 'medium' | 'normal';
    specialNotes?: string;
    roomType?: string;
  };
}

export class DualBotTelegramService {
  private ceoBot: Telegraf;
  private staffBot: Telegraf;
  private ceoChatId: string;
  private staffChatId: string;

  constructor() {
    // CEO Bot configuration
    const ceoToken = process.env.TELEGRAM_BOT_TOKEN || '8090902784:AAHqVuSWGscl_CSG2ojmqF5A7NMmUFxAEA8';
    this.ceoChatId = process.env.TELEGRAM_CHAT_ID || '-1002579208700';
    this.ceoBot = new Telegraf(ceoToken);

    // Staff Bot configuration
    const staffToken = process.env.STAFF_TELEGRAM_BOT_TOKEN || '8236751083:AAGOS9YE_VdOo-mBQ3cMQ9dr1DYRXdzbNgI';
    this.staffChatId = process.env.STAFF_TELEGRAM_CHAT_ID || '-1002926114573';
    this.staffBot = new Telegraf(staffToken);

    console.log('ü§ñ Dual Bot Service initialized with Telegraf:');
    console.log(`   üëî CEO Bot: ${this.ceoChatId}`);
    console.log(`   üè® Staff Bot: ${this.staffChatId}`);
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á CEO Bot (Executive Level)
   */
  async sendExecutiveNotification(notification: ExecutiveNotification): Promise<boolean> {
    try {
      console.log('üìä Sending executive notification:', notification.type);
      
      const message = this.formatExecutiveMessage(notification);
      return await this.sendTelegramMessage(this.ceoBot, this.ceoChatId, message, 'executive');
      
    } catch (error) {
      console.error('‚ùå Executive notification failed:', error);
      return false;
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Staff Bot (Operational Level)
   */
  async sendOperationalNotification(notification: OperationalNotification): Promise<boolean> {
    try {
      console.log('üè® Sending operational notification:', notification.type);
      
      const message = this.formatOperationalMessage(notification);
      return await this.sendTelegramMessage(this.staffBot, this.staffChatId, message, 'operational');
      
    } catch (error) {
      console.error('‚ùå Operational notification failed:', error);
      return false;
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á Bot (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô)
   */
  async sendBookingNotification(bookingData: any): Promise<{ ceo: boolean; staff: boolean }> {
    const results = { ceo: false, staff: false };

    try {
      // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á CEO Bot (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô)
      const executiveNotification: ExecutiveNotification = {
        type: 'booking',
        data: {
          bookingId: bookingData.bookingReferenceId || bookingData.id,
          customerName: bookingData.customerName || `${bookingData.firstName} ${bookingData.lastName}`,
          totalAmount: parseFloat(bookingData.totalPrice || bookingData.totalAmount || '0'),
          paymentStatus: bookingData.paymentStatus || '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
          roomType: bookingData.roomType || bookingData.roomTypeName,
          dates: {
            checkIn: new Date(bookingData.checkIn || bookingData.checkInDate),
            checkOut: new Date(bookingData.checkOut || bookingData.checkOutDate)
          },
          contactInfo: {
            email: bookingData.email || bookingData.guestEmail || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
            phone: bookingData.phone || bookingData.phoneNumber || bookingData.guestPhone || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
          },
          specialRequests: bookingData.specialRequests || bookingData.notes
        }
      };

      results.ceo = await this.sendExecutiveNotification(executiveNotification);

      // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Staff Bot (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)
      const guestFirstName = bookingData.customerName?.split(' ')[0] || 
                            bookingData.firstName || 
                            bookingData.guestName?.split(' ')[0] || 
                            '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤';

      const operationalNotification: OperationalNotification = {
        type: 'checkout', // Will be 'checkin' when appropriate
        data: {
          roomNumber: bookingData.roomNumber || 'TBA',
          guestName: `‡∏Ñ‡∏∏‡∏ì${guestFirstName}`,
          action: '‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
          time: new Date(),
          priority: bookingData.vip ? 'high' : 'normal',
          specialNotes: bookingData.specialRequests ? '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©' : undefined,
          roomType: bookingData.roomType || bookingData.roomTypeName
        }
      };

      results.staff = await this.sendOperationalNotification(operationalNotification);

    } catch (error) {
      console.error('‚ùå Booking notification failed:', error);
    }

    return results;
  }

  /**
   * ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏´‡πâ‡∏≠‡∏á (Staff Bot ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
   */
  async sendHousekeepingNotification(data: {
    roomNumber: string;
    roomType: string;
    guestName: string;
    checkOutTime: string;
    priority: 'high' | 'medium' | 'normal';
    specialInstructions?: string;
  }): Promise<boolean> {
    const notification: OperationalNotification = {
      type: 'housekeeping',
      data: {
        roomNumber: data.roomNumber,
        guestName: data.guestName.split(' ')[0] || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', // First name only
        action: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î',
        time: new Date(),
        priority: data.priority,
        specialNotes: data.specialInstructions,
        roomType: data.roomType
      }
    };

    return await this.sendOperationalNotification(notification);
  }

  /**
   * ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Check-in (Staff Bot ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
   */
  async sendCheckInNotification(data: {
    roomNumber: string;
    roomType: string;
    guestName: string;
    checkInTime: string;
    vip: boolean;
    specialRequests?: string;
  }): Promise<boolean> {
    const notification: OperationalNotification = {
      type: 'checkin',
      data: {
        roomNumber: data.roomNumber,
        guestName: data.guestName.split(' ')[0] || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', // First name only
        action: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å',
        time: new Date(),
        priority: data.vip ? 'high' : 'normal',
        specialNotes: data.specialRequests,
        roomType: data.roomType
      }
    };

    return await this.sendOperationalNotification(notification);
  }

  /**
   * Format ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Executive Level
   */
  private formatExecutiveMessage(notification: ExecutiveNotification): string {
    const { type, data } = notification;

    switch (type) {
      case 'booking':
        return `
üè® *MALAI RESORT - ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà!*

üÜï *‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìã *‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:*
üîñ *‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:* #${data.bookingId}
üë§ *‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á:* ${data.customerName}
üìß *‡∏≠‡∏µ‡πÄ‡∏°‡∏•:* ${data.contactInfo.email}
üì± *‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:* ${data.contactInfo.phone}

üìÖ *‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å:* ${data.dates.checkIn.toLocaleDateString('th-TH')}
üìÖ *‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å:* ${data.dates.checkOut.toLocaleDateString('th-TH')}
üè† *‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á:* ${data.roomType}

üí∞ *‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°:* ‡∏ø${data.totalAmount.toLocaleString('th-TH')}
üí≥ *‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞:* ${data.paymentStatus}

${data.specialRequests ? `üìù *‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:* ${data.specialRequests}\n` : ''}
‚è∞ *‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á:* ${new Date().toLocaleString('th-TH')}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ *‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:* ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
üîî *‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:* Executive Level Notification
        `.trim();

      default:
        return `üìä Executive Notification: ${type}`;
    }
  }

  /**
   * Format ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Operational Level
   */
  private formatOperationalMessage(notification: OperationalNotification): string {
    const { type, data } = notification;
    const priorityEmoji = data.priority === 'high' ? 'üî¥' : data.priority === 'medium' ? 'üü°' : 'üü¢';
    const timestamp = data.time.toLocaleString('th-TH');

    switch (type) {
      case 'housekeeping':
        return `
üßπ *‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏´‡πâ‡∏≠‡∏á*

${priorityEmoji} *‡∏´‡πâ‡∏≠‡∏á: ${data.roomNumber}*
üè† ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á: ${data.roomType || 'Standard'}
üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${data.guestName}
üö™ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå: ${timestamp.split(' ')[1]}
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${timestamp}
üìä ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ${data.priority === 'high' ? '‡∏™‡∏π‡∏á' : data.priority === 'medium' ? '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' : '‡∏õ‡∏Å‡∏ï‡∏¥'}

${data.specialNotes ? `üìù *‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏¥‡πÄ‡∏®‡∏©:*\n${data.specialNotes}\n` : ''}
‚úÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô

#RoomCleaning #Room${data.roomNumber} #${data.priority}Priority
        `.trim();

      case 'checkin':
        return `
üè® *‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å*

${priorityEmoji} *‡∏´‡πâ‡∏≠‡∏á: ${data.roomNumber}*
üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${data.guestName}
üè† ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á: ${data.roomType || 'Standard'}
‚è∞ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô: ${timestamp.split(' ')[1]}
üìä ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ${data.priority === 'high' ? 'VIP' : '‡∏õ‡∏Å‡∏ï‡∏¥'}

${data.specialNotes ? `üìù *‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©:*\n${data.specialNotes}\n` : ''}
‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
üîë ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏∏‡∏ç‡πÅ‡∏à‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå

#CheckIn #Room${data.roomNumber} #WelcomeGuest
        `.trim();

      case 'checkout':
        return `
üìã *‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà - ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°*

üè† *‡∏´‡πâ‡∏≠‡∏á:* ${data.roomNumber}
üë§ *‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:* ${data.guestName}
üìù *‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:* ${data.action}
‚è∞ *‡πÄ‡∏ß‡∏•‡∏≤:* ${timestamp}
${data.specialNotes ? `üìã *‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:* ${data.specialNotes}\n` : ''}
#NewBooking #Room${data.roomNumber}
        `.trim();

      default:
        return `üè® Operational Notification: ${type} - Room ${data.roomNumber}`;
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô Telegram API
   */
  private async sendTelegramMessage(bot: Telegraf, chatId: string, message: string, level: string): Promise<boolean> {
    try {
      await bot.telegram.sendMessage(chatId, message, {
        parse_mode: 'Markdown'
        // disable_web_page_preview: true // Not available in Telegraf
      });

      console.log(`‚úÖ ${level} notification sent successfully`);
      return true;

    } catch (error) {
      console.error(`‚ùå ${level} Telegram API error:`, error);
      return false;
    }
  }

  /**
   * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á Bot
   */
  async testBothBots(): Promise<{ ceo: boolean; staff: boolean }> {
    const results = { ceo: false, staff: false };

    try {
      // Test CEO Bot
      const ceoTestMessage = `üîß *Bot Test - Executive Level*\n\nTesting CEO Bot connection...\n‚è∞ ${new Date().toLocaleString('th-TH')}`;
      results.ceo = await this.sendTelegramMessage(this.ceoBot, this.ceoChatId, ceoTestMessage, 'executive');

      // Test Staff Bot  
      const staffTestMessage = `üîß *Bot Test - Operational Level*\n\nTesting Staff Bot connection...\n‚è∞ ${new Date().toLocaleString('th-TH')}`;
      results.staff = await this.sendTelegramMessage(this.staffBot, this.staffChatId, staffTestMessage, 'operational');

    } catch (error) {
      console.error('‚ùå Bot testing failed:', error);
    }

    return results;
  }

  /**
   * ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Bot
   */
  getBotStatus(): { ceo: any; staff: any } {
    return {
      ceo: {
        configured: !!(process.env.TELEGRAM_BOT_TOKEN && this.ceoChatId),
        token: process.env.TELEGRAM_BOT_TOKEN ? '‚úÖ Configured' : '‚ùå Missing',
        chatId: this.ceoChatId ? '‚úÖ Configured' : '‚ùå Missing',
        level: 'executive'
      },
      staff: {
        configured: !!(process.env.STAFF_TELEGRAM_BOT_TOKEN && this.staffChatId),
        token: process.env.STAFF_TELEGRAM_BOT_TOKEN ? '‚úÖ Configured' : '‚ùå Missing', 
        chatId: this.staffChatId ? '‚úÖ Configured' : '‚ùå Missing',
        level: 'operational'
      }
    };
  }
}
