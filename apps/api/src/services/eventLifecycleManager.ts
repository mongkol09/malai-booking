/**
 * Event Lifecycle Manager
 * ======================
 * 
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Lifecycle ‡∏Ç‡∏≠‡∏á Event ‡πÅ‡∏•‡∏∞ Pricing Rules ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
 */

import { PrismaClient } from '@prisma/client';
import { RuleConflictDetector, EventPriorityManager } from './eventRuleConflictManager';

const prisma = new PrismaClient();

export class EventLifecycleManager {
  
  /**
   * Cron Job: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Event ‡∏ó‡∏µ‡πà‡∏à‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
   */
  static async cleanupExpiredEvents(): Promise<void> {
    try {
      const now = new Date();
      
      // ‡∏´‡∏≤ Events ‡∏ó‡∏µ‡πà‡∏à‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà Rules ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
      const expiredEvents = await prisma.event.findMany({
        where: {
          endTime: { lt: now },
          status: 'CONFIRMED',
          suggestedPricingRule: {
            isActive: true
          }
        },
        include: {
          suggestedPricingRule: true
        }
      });
      
      for (const event of expiredEvents) {
        await this.deactivateEventRule(event);
      }
      
      if (expiredEvents.length > 0) {
        console.log(`üîÑ Cleaned up ${expiredEvents.length} expired events`);
      }
    } catch (error) {
      console.error('‚ùå Error in cleanupExpiredEvents:', error);
    }
  }
  
  /**
   * ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Pricing Rule ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Event ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß
   */
  static async deactivateEventRule(event: any): Promise<void> {
    try {
      if (event.suggestedPricingRule) {
        await prisma.dynamicPricingRule.update({
          where: { id: event.suggestedPricingRule.id },
          data: { 
            isActive: false,
            // ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏£‡∏≤‡∏∞ event ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            conditions: {
              ...(event.suggestedPricingRule.conditions as any),
              deactivatedReason: 'EVENT_ENDED',
              deactivatedAt: new Date()
            }
          }
        });
        
        console.log(`üîÑ Deactivated pricing rule for ended event: ${event.title}`);
      }
    } catch (error) {
      console.error(`‚ùå Error deactivating event rule for ${event.title}:`, error);
    }
  }
  
  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Event ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 7 ‡∏ß‡∏±‡∏ô
   */
  static async activateUpcomingEventRules(): Promise<void> {
    try {
      const sevenDaysFromNow = new Date();
      sevenDaysFromNow.setDate(sevenDaysFromNow.getDate() + 7);
      
      const upcomingEvents = await prisma.event.findMany({
        where: {
          startTime: { lte: sevenDaysFromNow },
          status: 'CONFIRMED',
          suggestedPricingRule: {
            isActive: false
          }
        },
        include: {
          suggestedPricingRule: true
        }
      });
      
      for (const event of upcomingEvents) {
        await this.activateEventRule(event);
      }
      
      if (upcomingEvents.length > 0) {
        console.log(`‚úÖ Activated ${upcomingEvents.length} upcoming events`);
      }
    } catch (error) {
      console.error('‚ùå Error in activateUpcomingEventRules:', error);
    }
  }
  
  /**
   * ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Pricing Rule ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡∏ß‡∏±‡∏ô Event
   */
  static async activateEventRule(event: any): Promise<void> {
    try {
      if (event.suggestedPricingRule) {
        await prisma.dynamicPricingRule.update({
          where: { id: event.suggestedPricingRule.id },
          data: { 
            isActive: true,
            conditions: {
              ...(event.suggestedPricingRule.conditions as any),
              activatedAt: new Date(),
              activatedReason: 'EVENT_APPROACHING'
            }
          }
        });
        
        console.log(`‚úÖ Activated pricing rule for upcoming event: ${event.title}`);
      }
    } catch (error) {
      console.error(`‚ùå Error activating event rule for ${event.title}:`, error);
    }
  }
}

/**
 * Event-Rule Integration Service
 * =============================
 * 
 * ‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Event Management ‡πÅ‡∏•‡∏∞ Dynamic Pricing
 */
export class EventRuleIntegrationService {
  
  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á Pricing Rule ‡∏à‡∏≤‡∏Å Event ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Conflicts
   */
  static async createEventRule(event: any, aiSuggestion: any): Promise<any> {
    try {
      // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Conflicts
      const conflictReport = await RuleConflictDetector.detectConflicts({
        dateRangeStart: event.startTime,
        dateRangeEnd: event.endTime,
        priority: aiSuggestion.suggestedPriority,
        action: aiSuggestion.action
      });
      
      if (conflictReport.hasConflicts && !conflictReport.canProceed) {
        throw new Error(`Cannot create event rule due to conflicts: ${conflictReport.recommendations.join(', ')}`);
      }
      
      // 2. ‡∏õ‡∏£‡∏±‡∏ö Priority ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      const finalPriority = conflictReport.hasConflicts ? 
        EventPriorityManager.calculateEventPriority(event, await this.getExistingRules()) :
        aiSuggestion.suggestedPriority;
      
      // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Rule ‡πÉ‡∏´‡∏°‡πà
      const newRule = await prisma.dynamicPricingRule.create({
        data: {
          name: `üéØ Event: ${event.title}`,
          description: `AI-generated rule for ${event.title}`,
          priority: finalPriority,
          isActive: false, // ‡∏à‡∏∞ activate ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≤‡∏° Lifecycle
          conditions: {
            eventId: event.id,
            eventCategory: event.category,
            dateRange: {
              start: event.startTime,
              end: event.endTime
            },
            metadata: {
              createdBy: 'AI_EVENT_MANAGEMENT',
              aiConfidence: aiSuggestion.confidence,
              conflictResolved: conflictReport.hasConflicts
            }
          },
          action: aiSuggestion.action,
          dateRangeStart: event.startTime,
          dateRangeEnd: event.endTime,
          roomTypes: aiSuggestion.roomTypes || ['all']
        }
      });
      
      // 4. Update Event ‡∏Å‡∏±‡∏ö Rule ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
      await prisma.event.update({
        where: { id: event.id },
        data: {
          suggestedPricingRuleId: newRule.id,
          suggestionDetails: JSON.stringify({
            aiSuggestion,
            conflictReport,
            finalPriority,
            createdAt: new Date()
          })
        }
      });
      
      console.log(`‚úÖ Created event rule for ${event.title}: ${newRule.id}`);
      return newRule;
    } catch (error) {
      console.error(`‚ùå Error creating event rule for ${event.title}:`, error);
      throw error;
    }
  }
  
  /**
   * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Event ‡πÅ‡∏•‡∏∞ Rule ‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
   */
  static async updateEventRule(eventId: string, updates: any): Promise<void> {
    try {
      const event = await prisma.event.findUnique({
        where: { id: eventId },
        include: { suggestedPricingRule: true }
      });
      
      if (!event) throw new Error('Event not found');
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Event
      await prisma.event.update({
        where: { id: eventId },
        data: updates
      });
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Rule ‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (event.suggestedPricingRule && (updates.startTime || updates.endTime)) {
        await prisma.dynamicPricingRule.update({
          where: { id: event.suggestedPricingRule.id },
          data: {
            dateRangeStart: updates.startTime || event.startTime,
            dateRangeEnd: updates.endTime || event.endTime,
            conditions: {
              ...(event.suggestedPricingRule.conditions as any),
              dateRange: {
                start: updates.startTime || event.startTime,
                end: updates.endTime || event.endTime
              },
              lastModified: new Date()
            }
          }
        });
      }
      
      console.log(`‚úÖ Updated event rule for ${eventId}`);
    } catch (error) {
      console.error(`‚ùå Error updating event rule for ${eventId}:`, error);
      throw error;
    }
  }
  
  /**
   * ‡∏•‡∏ö Event ‡πÅ‡∏•‡∏∞ Rule ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
   */
  static async deleteEventRule(eventId: string): Promise<void> {
    try {
      const event = await prisma.event.findUnique({
        where: { id: eventId },
        include: { suggestedPricingRule: true }
      });
      
      if (!event) return;
      
      // ‡∏•‡∏ö Rule ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (event.suggestedPricingRule) {
        await prisma.dynamicPricingRule.delete({
          where: { id: event.suggestedPricingRule.id }
        });
      }
      
      // ‡∏•‡∏ö Event
      await prisma.event.delete({
        where: { id: eventId }
      });
      
      console.log(`üóëÔ∏è Deleted event and rule for ${eventId}`);
    } catch (error) {
      console.error(`‚ùå Error deleting event rule for ${eventId}:`, error);
      throw error;
    }
  }
  
  private static async getExistingRules(): Promise<any[]> {
    try {
      return await prisma.dynamicPricingRule.findMany({
        where: { isActive: true }
      });
    } catch (error) {
      console.error('‚ùå Error fetching existing rules:', error);
      return [];
    }
  }
}
