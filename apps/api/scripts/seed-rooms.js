const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function seedRoomsAndRoomTypes() {
  console.log('üå± ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á...');

  try {
    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Room Types
    const roomTypes = [
      {
        name: 'Standard Room',
        description: '‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ï‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ï‡∏µ‡∏¢‡∏á‡∏Ñ‡∏π‡πà',
        baseRate: 1500.00,
        capacityAdults: 2,
        capacityChildren: 1,
        sizeSqm: 25.0,
        bedType: 'Queen Bed',
        amenities: {
          features: ['Air Conditioning', 'Free WiFi', 'TV', 'Mini Fridge', 'Private Bathroom']
        }
      },
      {
        name: 'Deluxe Room',
        description: '‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏î‡∏µ‡∏•‡∏±‡∏Å‡∏ã‡πå ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô',
        baseRate: 2500.00,
        capacityAdults: 2,
        capacityChildren: 2,
        sizeSqm: 35.0,
        bedType: 'King Bed',
        amenities: {
          features: ['Air Conditioning', 'Free WiFi', 'Smart TV', 'Mini Bar', 'Private Bathroom', 'Balcony', 'Safe Box']
        }
      },
      {
        name: 'Suite Room',
        description: '‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏ß‡∏µ‡∏ó ‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤‡∏á',
        baseRate: 4500.00,
        capacityAdults: 4,
        capacityChildren: 2,
        sizeSqm: 65.0,
        bedType: 'King Bed + Sofa Bed',
        amenities: {
          features: ['Air Conditioning', 'Free WiFi', 'Smart TV', 'Mini Bar', 'Private Bathroom', 'Living Room', 'Kitchenette', 'Balcony', 'Safe Box']
        }
      },
      {
        name: 'Grand Serenity',
        description: '‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö Grand Serenity ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î',
        baseRate: 8500.00,
        capacityAdults: 4,
        capacityChildren: 2,
        sizeSqm: 95.0,
        bedType: 'King Bed + Living Area',
        amenities: {
          features: ['Air Conditioning', 'Free WiFi', 'Premium Smart TV', 'Premium Mini Bar', 'Luxury Bathroom', 'Private Living Room', 'Full Kitchenette', 'Large Balcony', 'Premium Safe Box', 'Butler Service']
        }
      }
    ];

    console.log('üìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Room Types...');
    const createdRoomTypes = [];
    
    for (const roomType of roomTypes) {
      const existing = await prisma.roomType.findFirst({
        where: { name: roomType.name }
      });
      
      if (!existing) {
        const created = await prisma.roomType.create({
          data: roomType
        });
        createdRoomTypes.push(created);
        console.log(`   ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á ${roomType.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      } else {
        createdRoomTypes.push(existing);
        console.log(`   ‚è≠Ô∏è  ${roomType.name} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
      }
    }

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Floor Plan
    console.log('üè¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Floor Plans...');
    const floorPlans = [
      { floorNumber: 1, floorName: '‡∏ä‡∏±‡πâ‡∏ô 1 - ‡∏•‡πá‡∏≠‡∏ö‡∏ö‡∏µ‡πâ', totalRooms: 10 },
      { floorNumber: 2, floorName: '‡∏ä‡∏±‡πâ‡∏ô 2 - Standard', totalRooms: 15 },
      { floorNumber: 3, floorName: '‡∏ä‡∏±‡πâ‡∏ô 3 - Deluxe', totalRooms: 12 },
      { floorNumber: 4, floorName: '‡∏ä‡∏±‡πâ‡∏ô 4 - Suite', totalRooms: 8 }
    ];

    const createdFloorPlans = [];
    for (const floor of floorPlans) {
      const existing = await prisma.floorPlan.findFirst({
        where: { floorNumber: floor.floorNumber }
      });
      
      if (!existing) {
        const created = await prisma.floorPlan.create({ data: floor });
        createdFloorPlans.push(created);
        console.log(`   ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á ${floor.floorName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      } else {
        createdFloorPlans.push(existing);
        console.log(`   ‚è≠Ô∏è  ${floor.floorName} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
      }
    }

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Rooms
    console.log('üö™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Rooms...');
    const rooms = [];
    
    // Standard Rooms (‡∏ä‡∏±‡πâ‡∏ô 2)
    const standardRoomType = createdRoomTypes.find(rt => rt.name === 'Standard Room');
    const floor2 = createdFloorPlans.find(fp => fp.floorNumber === 2);
    for (let i = 201; i <= 215; i++) {
      rooms.push({
        roomNumber: i.toString(),
        roomTypeId: standardRoomType.id,
        floorPlanId: floor2.id,
        status: 'Available',
        housekeepingStatus: 'Clean'
      });
    }

    // Deluxe Rooms (‡∏ä‡∏±‡πâ‡∏ô 3)
    const deluxeRoomType = createdRoomTypes.find(rt => rt.name === 'Deluxe Room');
    const floor3 = createdFloorPlans.find(fp => fp.floorNumber === 3);
    for (let i = 301; i <= 312; i++) {
      rooms.push({
        roomNumber: i.toString(),
        roomTypeId: deluxeRoomType.id,
        floorPlanId: floor3.id,
        status: 'Available',
        housekeepingStatus: 'Clean'
      });
    }

    // Suite Rooms (‡∏ä‡∏±‡πâ‡∏ô 4)
    const suiteRoomType = createdRoomTypes.find(rt => rt.name === 'Suite Room');
    const grandSerenityRoomType = createdRoomTypes.find(rt => rt.name === 'Grand Serenity');
    const floor4 = createdFloorPlans.find(fp => fp.floorNumber === 4);
    
    // Suite Rooms 401-405
    for (let i = 401; i <= 405; i++) {
      rooms.push({
        roomNumber: i.toString(),
        roomTypeId: suiteRoomType.id,
        floorPlanId: floor4.id,
        status: 'Available',
        housekeepingStatus: 'Clean'
      });
    }

    // Grand Serenity Rooms 406-408
    for (let i = 406; i <= 408; i++) {
      rooms.push({
        roomNumber: i.toString(),
        roomTypeId: grandSerenityRoomType.id,
        floorPlanId: floor4.id,
        status: 'Available',
        housekeepingStatus: 'Clean'
      });
    }

    console.log(`üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á ${rooms.length} ‡∏´‡πâ‡∏≠‡∏á...`);
    let createdCount = 0;
    
    for (const room of rooms) {
      const existing = await prisma.room.findFirst({
        where: { roomNumber: room.roomNumber }
      });
      
      if (!existing) {
        await prisma.room.create({ data: room });
        createdCount++;
        if (createdCount % 5 === 0) {
          console.log(`   ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ${createdCount}/${rooms.length}`);
        }
      }
    }

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${createdCount} ‡∏´‡πâ‡∏≠‡∏á`);

    // 4. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const totalRoomTypes = await prisma.roomType.count();
    const totalRooms = await prisma.room.count();
    const totalFloorPlans = await prisma.floorPlan.count();

    console.log('\nüéâ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:');
    console.log(`   üìã ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á: ${totalRoomTypes} ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó`);
    console.log(`   üö™ ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å: ${totalRooms} ‡∏´‡πâ‡∏≠‡∏á`);
    console.log(`   üè¢ ‡∏ä‡∏±‡πâ‡∏ô: ${totalFloorPlans} ‡∏ä‡∏±‡πâ‡∏ô`);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    console.log('\nüìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:');
    for (const roomType of createdRoomTypes) {
      const count = await prisma.room.count({
        where: { roomTypeId: roomType.id }
      });
      console.log(`   ${roomType.name}: ${count} ‡∏´‡πâ‡∏≠‡∏á (${roomType.baseRate} ‡∏ö‡∏≤‡∏ó/‡∏Ñ‡∏∑‡∏ô)`);
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
if (require.main === module) {
  seedRoomsAndRoomTypes()
    .then(() => {
      console.log('üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
      process.exit(1);
    });
}

module.exports = { seedRoomsAndRoomTypes };
