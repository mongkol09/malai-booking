const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function seedRealRoomsData() {
  console.log('üè® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°...');

  try {
    // 1. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î Foreign key)
    console.log('üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...');
    console.log('   - ‡∏•‡∏ö Bookings ‡πÅ‡∏•‡∏∞ related data...');
    await prisma.booking.deleteMany({});
    await prisma.bookingIntent.deleteMany({});
    console.log('   - ‡∏•‡∏ö Housekeeping ‡πÅ‡∏•‡∏∞ related data...');
    await prisma.housekeepingTask.deleteMany({});
    await prisma.maintenanceTicket.deleteMany({});
    await prisma.roomImage.deleteMany({});
    await prisma.roomComplementaryItem.deleteMany({});
    await prisma.chat.deleteMany({});
    await prisma.calendar.deleteMany({});
    await prisma.fileManager.deleteMany({});
    await prisma.housekeepingSchedule.deleteMany({});
    await prisma.roomStatusHistory.deleteMany({});
    await prisma.checkinSession.deleteMany({});
    console.log('   - ‡∏•‡∏ö Daily Room Rates...');
    await prisma.dailyRoomRate.deleteMany({});
    console.log('   - ‡∏•‡∏ö Rooms...');
    await prisma.room.deleteMany({});
    console.log('   - ‡∏•‡∏ö Room Types...');
    await prisma.roomType.deleteMany({});
    console.log('   - ‡∏•‡∏ö Floor Plans...');
    await prisma.floorPlan.deleteMany({});

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Room Types ‡∏à‡∏£‡∏¥‡∏á
    const realRoomTypes = [
      {
        name: 'Private House',
        description: '‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏ç‡πà ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤‡∏á',
        baseRate: 35000.00,
        capacityAdults: 6,
        capacityChildren: 4,
        sizeSqm: 200.0,
        bedType: 'Multiple King Beds',
        amenities: {
          features: ['Private Kitchen', 'Living Room', 'Multiple Bedrooms', 'Private Garden', 'Parking', 'Free WiFi', 'Air Conditioning']
        }
      },
      {
        name: 'Grand Serenity',
        description: '‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö Grand Serenity ‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤‡∏™‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©',
        baseRate: 15000.00,
        capacityAdults: 2,
        capacityChildren: 1,
        sizeSqm: 85.0,
        bedType: 'King Bed',
        amenities: {
          features: ['Premium Amenities', 'Sea View', 'Private Balcony', 'Premium Mini Bar', 'Butler Service', 'Free WiFi', 'Air Conditioning']
        }
      },
      {
        name: 'Serenity Villa',
        description: '‡∏ß‡∏¥‡∏•‡∏•‡πà‡∏≤‡πÄ‡∏ã‡πÄ‡∏£‡∏ô‡∏¥‡∏ï‡∏µ‡πâ ‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡∏™‡∏á‡∏ö‡∏£‡πà‡∏°‡∏£‡∏∑‡πà‡∏ô',
        baseRate: 8000.00,
        capacityAdults: 2,
        capacityChildren: 1,
        sizeSqm: 60.0,
        bedType: 'King Bed',
        amenities: {
          features: ['Private Villa', 'Garden View', 'Private Terrace', 'Mini Bar', 'Free WiFi', 'Air Conditioning']
        }
      },
      {
        name: 'Onsen Villa',
        description: '‡∏ß‡∏¥‡∏•‡∏•‡πà‡∏≤‡∏≠‡∏≠‡∏ô‡πÄ‡∏ã‡πá‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡πà‡∏≠‡∏ô‡πâ‡∏≥‡∏£‡πâ‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß',
        baseRate: 12000.00,
        capacityAdults: 2,
        capacityChildren: 1,
        sizeSqm: 70.0,
        bedType: 'King Bed',
        amenities: {
          features: ['Private Onsen', 'Hot Spring Bath', 'Private Villa', 'Garden View', 'Mini Bar', 'Free WiFi', 'Air Conditioning']
        }
      }
    ];

    console.log('üìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Room Types ‡∏à‡∏£‡∏¥‡∏á...');
    const createdRoomTypes = {};
    
    for (const roomType of realRoomTypes) {
      const created = await prisma.roomType.create({
        data: roomType
      });
      createdRoomTypes[roomType.name] = created;
      console.log(`   ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á ${roomType.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${roomType.baseRate} ‡∏ö‡∏≤‡∏ó/‡∏Ñ‡∏∑‡∏ô)`);
    }

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤
    console.log('üö™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á...');
    const realRooms = [
      // Private House
      {
        roomNumber: 'PH-1',
        roomTypeId: createdRoomTypes['Private House'].id,
        status: 'Available',
        housekeepingStatus: 'Clean',
        notes: '‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß'
      },
      
      // Grand Serenity Rooms
      {
        roomNumber: 'F3',
        roomTypeId: createdRoomTypes['Grand Serenity'].id,
        status: 'Available',
        housekeepingStatus: 'Clean'
      },
      {
        roomNumber: 'F2',
        roomTypeId: createdRoomTypes['Grand Serenity'].id,
        status: 'Available',
        housekeepingStatus: 'Clean'
      },
      {
        roomNumber: 'F1',
        roomTypeId: createdRoomTypes['Grand Serenity'].id,
        status: 'Available',
        housekeepingStatus: 'Clean'
      },
      
      // Serenity Villa Rooms
      {
        roomNumber: 'E3',
        roomTypeId: createdRoomTypes['Serenity Villa'].id,
        status: 'Available',
        housekeepingStatus: 'Clean'
      },
      {
        roomNumber: 'E2',
        roomTypeId: createdRoomTypes['Serenity Villa'].id,
        status: 'Available',
        housekeepingStatus: 'Clean'
      },
      {
        roomNumber: 'E1',
        roomTypeId: createdRoomTypes['Serenity Villa'].id,
        status: 'Available',
        housekeepingStatus: 'Clean'
      },
      
      // Onsen Villa Rooms
      {
        roomNumber: 'D1',
        roomTypeId: createdRoomTypes['Onsen Villa'].id,
        status: 'Available',
        housekeepingStatus: 'Clean'
      },
      {
        roomNumber: 'C2',
        roomTypeId: createdRoomTypes['Onsen Villa'].id,
        status: 'Available',
        housekeepingStatus: 'Clean'
      },
      {
        roomNumber: 'C1',
        roomTypeId: createdRoomTypes['Onsen Villa'].id,
        status: 'Available',
        housekeepingStatus: 'Clean'
      },
      {
        roomNumber: 'B2',
        roomTypeId: createdRoomTypes['Onsen Villa'].id,
        status: 'Available',
        housekeepingStatus: 'Clean'
      },
      {
        roomNumber: 'B1',
        roomTypeId: createdRoomTypes['Onsen Villa'].id,
        status: 'Available',
        housekeepingStatus: 'Clean'
      }
    ];

    console.log(`üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á ${realRooms.length} ‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á...`);
    
    for (const room of realRooms) {
      await prisma.room.create({ data: room });
      console.log(`   ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á ${room.roomNumber} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    }

    // 4. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const totalRoomTypes = await prisma.roomType.count();
    const totalRooms = await prisma.room.count();

    console.log('\nüéâ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:');
    console.log(`   üìã ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á: ${totalRoomTypes} ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó`);
    console.log(`   üö™ ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å: ${totalRooms} ‡∏´‡πâ‡∏≠‡∏á`);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    console.log('\nüìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:');
    for (const [typeName, roomType] of Object.entries(createdRoomTypes)) {
      const count = await prisma.room.count({
        where: { roomTypeId: roomType.id }
      });
      console.log(`   ${typeName}: ${count} ‡∏´‡πâ‡∏≠‡∏á (${roomType.baseRate} ‡∏ö‡∏≤‡∏ó/‡∏Ñ‡∏∑‡∏ô)`);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á
      const rooms = await prisma.room.findMany({
        where: { roomTypeId: roomType.id },
        select: { roomNumber: true }
      });
      const roomNumbers = rooms.map(r => r.roomNumber).join(', ');
      console.log(`     ‡∏´‡πâ‡∏≠‡∏á: ${roomNumbers}`);
    }

    console.log('\n‚ú® ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß!');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
if (require.main === module) {
  seedRealRoomsData()
    .then(() => {
      console.log('üéØ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
      process.exit(1);
    });
}

module.exports = { seedRealRoomsData };
