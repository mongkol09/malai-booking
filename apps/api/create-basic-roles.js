const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function createBasicRolesAndPermissions() {
  try {
    console.log('üîß === ‡∏™‡∏£‡πâ‡∏≤‡∏á ROLES ‡πÅ‡∏•‡∏∞ PERMISSIONS ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ===\n');
    
    await prisma.$connect();
    console.log('‚úÖ Database connected\n');
    
    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Roles ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    console.log('üìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Basic Roles...');
    
    const rolesToCreate = [
      {
        name: 'Super Admin',
        description: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á'
      },
      {
        name: 'Admin',
        description: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà'
      },
      {
        name: 'Manager',
        description: '‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô'
      },
      {
        name: 'Staff',
        description: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô'
      },
      {
        name: 'Customer',
        description: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß'
      }
    ];
    
    const createdRoles = {};
    
    for (const roleData of rolesToCreate) {
      const existingRole = await prisma.role.findFirst({
        where: { name: roleData.name }
      });
      
      if (existingRole) {
        console.log(`   ‚ö†Ô∏è  Role "${roleData.name}" ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
        createdRoles[roleData.name] = existingRole;
      } else {
        const newRole = await prisma.role.create({
          data: roleData
        });
        console.log(`   ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Role "${roleData.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        createdRoles[roleData.name] = newRole;
      }
    }
    
    console.log('\nüîê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Role Permissions...');
    
    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Permissions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Role
    const permissionsConfig = {
      'Super Admin': {
        'users': { canRead: true, canWrite: true, canCreate: true, canDelete: true },
        'roles': { canRead: true, canWrite: true, canCreate: true, canDelete: true },
        'bookings': { canRead: true, canWrite: true, canCreate: true, canDelete: true },
        'rooms': { canRead: true, canWrite: true, canCreate: true, canDelete: true },
        'reports': { canRead: true, canWrite: true, canCreate: true, canDelete: true },
        'settings': { canRead: true, canWrite: true, canCreate: true, canDelete: true },
        'promocodes': { canRead: true, canWrite: true, canCreate: true, canDelete: true },
        'events': { canRead: true, canWrite: true, canCreate: true, canDelete: true }
      },
      'Admin': {
        'users': { canRead: true, canWrite: true, canCreate: true, canDelete: false },
        'roles': { canRead: true, canWrite: false, canCreate: false, canDelete: false },
        'bookings': { canRead: true, canWrite: true, canCreate: true, canDelete: true },
        'rooms': { canRead: true, canWrite: true, canCreate: true, canDelete: false },
        'reports': { canRead: true, canWrite: true, canCreate: true, canDelete: false },
        'settings': { canRead: true, canWrite: true, canCreate: false, canDelete: false },
        'promocodes': { canRead: true, canWrite: true, canCreate: true, canDelete: true },
        'events': { canRead: true, canWrite: true, canCreate: true, canDelete: true }
      },
      'Manager': {
        'users': { canRead: true, canWrite: false, canCreate: false, canDelete: false },
        'bookings': { canRead: true, canWrite: true, canCreate: true, canDelete: false },
        'rooms': { canRead: true, canWrite: true, canCreate: false, canDelete: false },
        'reports': { canRead: true, canWrite: false, canCreate: false, canDelete: false },
        'promocodes': { canRead: true, canWrite: true, canCreate: true, canDelete: false },
        'events': { canRead: true, canWrite: true, canCreate: true, canDelete: false }
      },
      'Staff': {
        'bookings': { canRead: true, canWrite: true, canCreate: true, canDelete: false },
        'rooms': { canRead: true, canWrite: false, canCreate: false, canDelete: false },
        'reports': { canRead: true, canWrite: false, canCreate: false, canDelete: false },
        'events': { canRead: true, canWrite: false, canCreate: false, canDelete: false }
      },
      'Customer': {
        'bookings': { canRead: true, canWrite: false, canCreate: true, canDelete: false },
        'rooms': { canRead: true, canWrite: false, canCreate: false, canDelete: false },
        'events': { canRead: true, canWrite: false, canCreate: false, canDelete: false }
      }
    };
    
    let totalPermissionsCreated = 0;
    
    for (const [roleName, resources] of Object.entries(permissionsConfig)) {
      const role = createdRoles[roleName];
      if (!role) continue;
      
      console.log(`\n   üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á Permissions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Role "${roleName}":`);
      
      for (const [resourceName, permissions] of Object.entries(resources)) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ permission ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingPermission = await prisma.rolePermission.findUnique({
          where: {
            roleId_resourceName: {
              roleId: role.id,
              resourceName: resourceName
            }
          }
        });
        
        if (existingPermission) {
          console.log(`      ‚ö†Ô∏è  Permission "${resourceName}" ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
          continue;
        }
        
        await prisma.rolePermission.create({
          data: {
            roleId: role.id,
            resourceName: resourceName,
            canRead: permissions.canRead || false,
            canWrite: permissions.canWrite || false,
            canCreate: permissions.canCreate || false,
            canDelete: permissions.canDelete || false
          }
        });
        
        const actions = [];
        if (permissions.canRead) actions.push('Read');
        if (permissions.canWrite) actions.push('Write');
        if (permissions.canCreate) actions.push('Create');
        if (permissions.canDelete) actions.push('Delete');
        
        console.log(`      ‚úÖ ${resourceName}: ${actions.join(', ')}`);
        totalPermissionsCreated++;
      }
    }
    
    console.log(`\nüìä ‡∏™‡∏£‡πâ‡∏≤‡∏á ${Object.keys(createdRoles).length} roles ‡πÅ‡∏•‡∏∞ ${totalPermissionsCreated} permissions ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n`);
    
    // 3. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    console.log('üéâ === ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ===');
    console.log('‚úÖ Roles ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:');
    Object.values(createdRoles).forEach((role, index) => {
      console.log(`   ${index + 1}. ${role.name} - ${role.description}`);
    });
    
    console.log('\n‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:');
    console.log('   1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Staff Profiles ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö users ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô ADMIN/STAFF');
    console.log('   2. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Users ‡∏Å‡∏±‡∏ö Roles ‡∏ú‡πà‡∏≤‡∏ô Staff Profile');
    console.log('   3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö permissions');
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createBasicRolesAndPermissions();
